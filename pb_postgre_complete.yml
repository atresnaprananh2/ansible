- hosts: postgre
  remote_user: root
  become: true
  become_user: root
  gather_facts: yes
  name: System Discovery
  vars:
    installername: postgresqlinstall.exe
    urlpatch: https://sbp.enterprisedb.com/getfile.jsp?fileid=1259127
    service_pattern: postgresql
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:
   
    - name: Display OS distribution and version
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }}"
    
    #linux script
    - name: Gather installed package facts (linux)
      ansible.builtin.package_facts:
      when: "'Windows' not in ansible_distribution"
    
    - name: Check if PostgreSQL is installed (linux)
      debug:
        msg: "{{ inventory_hostname }}: PostgreSQL is installed"
      when: 
        - "'Windows' not in ansible_distribution"
        - "'postgresql' in ansible_facts.packages or 'postgresql-server' in ansible_facts.packages"
    
    - name: Find the path of psql  (linux)
      command: which psql
      register: psql_path
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"


    - name: Resolve the real path of psql  (linux)
      command: readlink -f "{{ psql_path.stdout }}"
      register: binpathpsql
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"

    - name: Set fact base dir (linux)
      set_fact:
        basedirlnx: "{{ binpathpsql.stdout[:-4] }}"
      
      when: "'RedHat' in ansible_distribution"
    
    - name: Set fact base dir before bin (linux)
      set_fact:
        basedirpg: "{{ basedirlnx[:-5] }}"
      when: "'RedHat' in ansible_distribution"
     
    - name: chk basedir
      debug:
        msg: "{{ basedirpg }}"
      when: 
        - "'Windows' not in ansible_distribution"

  
    - name: Find the path of postgre data  (linux)
      command: sudo -u postgres psql -t -P format=unaligned -c "SHOW data_directory;"
      register: pgdatadir
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"

    - name: Get Installed Version  (linux)
      command: sudo -u postgres psql -t -P format=unaligned -c "SELECT version();"
      register: pgdataver
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"
      
    - name: Get Major Version
      command: sudo -u postgres  psql -t -P format=unaligned -c "SHOW server_version;"
      register: majorver
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"  
    
    - name: Set fact data dir (linux)
      set_fact:
        datadirlnx: "{{ pgdatadir.stdout }}"
        datadirshrt: "{{ pgdatadir.stdout[:-7] }}"
        postgres_version: "{{ pgdataver.stdout.split()[1] }}"
        major_ver: "{{ majorver.stdout.split('.')[0] }}"
      when: "'RedHat' in ansible_distribution"
    
    - name: Version Check  (linux)
      debug:
        var: postgres_version
      when: "'RedHat' in ansible_distribution"

    - name: Major Version Check  (linux)
      debug:
        var: major_ver
      when: "'RedHat' in ansible_distribution"

    
    - name: Run pg_dumpall  (linux)
      shell: sudo -u postgres pg_dumpall > {{ datadirshrt }}backups/backup_{{ now(utc=true,fmt='%d%m%Y') }}.sql
      register: chk1
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"

    - name: Stop old svc   (linux)
      shell: sudo -u postgres pg_ctl stop -D {{ datadirlnx }}
      register: chk3
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"

    - name: Check latest version (above ver 10 linux)
      shell: curl -s https://www.postgresql.org/ftp/source/ | grep -Po 'v{{ major_ver }}\.[0-9]+' | sort -V | tail -1
      register: latestver
      args:
        chdir: '/var/lib'
      when: 
        - "'RedHat' in ansible_distribution"
        - "major_ver | int >= 11"
    - name: chk ver
      debug:
        msg:
          - "{{ latestver.stdout }}"
      when: "'RedHat' in ansible_distribution"

    
    - name: download patch data
      command: wget https://ftp.postgresql.org/pub/source/v{{ latestver.stdout[1:] }}/postgresql-{{ latestver.stdout[1:] }}.tar.gz
      when: "'RedHat' in ansible_distribution"
    
    - name: Extract patch data
      command: tar -xzf postgresql-{{ latestver.stdout[1:] }}.tar.gz
      when: "'RedHat' in ansible_distribution"

    - name: install devel kit
      command: sudo yum install gcc readline-devel zlib-devel -y
      when: "'RedHat' in ansible_distribution"

    - name: configure installer
      shell: ./configure --prefix={{ basedirpg }} --without-icu
      register: chk2
      args:
        chdir: '/root/postgresql-{{ latestver.stdout[1:] }}'

    - name: make file 
      command: make
      args:
        chdir: '/root/postgresql-{{ latestver.stdout[1:] }}'
      when: "'RedHat' in ansible_distribution"
     

    - name: make install 
      command: make install
      register: chkins
      args:
        chdir: '/root/postgresql-{{ latestver.stdout[1:] }}'
      when: "'RedHat' in ansible_distribution"
    
    - name: chk configure
      debug:
        msg:
          - "{{ chkins.stdout }}"
      when: "'RedHat' in ansible_distribution"

    # - name: Install or update PostgreSQL packages  (linux)
    #   yum:
    #     name:
    #       - postgresql{{ major_ver }}
    #       - postgresql{{ major_ver }}-server
    #     state: latest
    #   when: "'RedHat' in ansible_distribution"
    
    - name: Start old svc   (linux)
      shell: sudo -u postgres pg_ctl start -D {{ datadirlnx }}
      register: chk3
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"
    

    - name: set command links  (linux)
      shell: sudo ln -s /usr/pgsql-{{ major_ver }}/bin/* /usr/bin/ --force
      args:
        chdir: '{{ basedirlnx }}'
      when: "'RedHat' in ansible_distribution"



    

    #Windows Host Script

    - name: Get PostgreSQL installation base directory from registry (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Installations
      register: postgres_installations
      when: "'Windows' in ansible_distribution"

    - name: Get Global PostgreSQL (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL Global Development Group\PostgreSQL
      register: postgresglobal
      when: "'Windows' in ansible_distribution"
    
    - name: Check Postgre Installed Ver (windows)
      debug:
        msg: "PostgreSQL {{ postgresglobal.properties['Version']['value'] }}"   
      when: "'Windows' in ansible_distribution"

    - name: Get the first installation ID (windows)
      set_fact:
        installation_id: "{{ postgres_installations.sub_keys[0] }}"
      when: "'Windows' in ansible_distribution"

    - name: Retrieve installation directory (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Installations\{{ installation_id }}
      register: postgres_installation_dir2
      when: "'Windows' in ansible_distribution"
    
   
    - name: Set fact base dir (windows)
      set_fact:
        basedir: "{{ postgres_installation_dir2.properties['Base Directory']['value'] }}"
        datadir: "{{ postgres_installation_dir2.properties['Data Directory']['value'] }}"
        installedver: "{{ postgresglobal.properties['Version']['value'] }}"
        serviceid: "{{ postgres_installation_dir2.properties['Service ID']['value'] }}"

      when: "'Windows' in ansible_distribution"

    - name: Stop PostgreSQL 15 service (windows)
      win_service:
        name: "{{ serviceid }}"
        state: stopped
      when: "'Windows' in ansible_distribution"

    - name: Backup PostgreSQL data directory (windows)
      win_command: >
        powershell -command "Copy-Item -Path '{{ datadir }}' -Destination 'C:\PostgreSQL_Backup' -Recurse"
      when: "'Windows' in ansible_distribution"

    - name: Download PostgreSQL 16 installer (windows)
      win_get_url:
        url: "{{ urlpatch }}"
        dest: C:\{{ installername }}
      when: "'Windows' in ansible_distribution"

    - name: Install PostgreSQL 15 (windows)
      win_command: >
        powershell -command "Start-Process -FilePath 'C:\{{ installername }}' -ArgumentList '--unattendedmodeui minimal --mode unattended --prefix "{{ basedir }}" --datadir "{{ datadir }}"' -Wait"
      register: install_output
      when: "'Windows' in ansible_distribution"

    - name: Print install output (windows)
      debug:
        var: install_output
      when: "'Windows' in ansible_distribution"

    - name: Start PostgreSQL 15 service (windows)
      win_service:
        name: "{{ serviceid }}"
        state: started
      when: "'Windows' in ansible_distribution"


    




    