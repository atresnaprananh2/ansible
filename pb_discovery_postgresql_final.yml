- hosts: all
  gather_facts: yes
  name: System Discovery
  vars:
    psqlmode: 'HA-Standby'
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:
  
    - name: Display OS distribution and version (linux)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts['default_ipv4']['address'] }}"
      when: "'Windows' not in ansible_distribution"
    
    - name: Display OS distribution and version (windows)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts.ip_addresses[1] }}"
      when: "'Windows' in ansible_distribution"

    #linux script

    - name: Find the path of psql  (linux)
      command: which psql
      register: psql_path
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"

    - name: Resolve the real path of psql  (linux)
      command: readlink -f "{{ psql_path.stdout }}"
      register: binpathpsql
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"
    
   

    - name: Set fact base dir (linux)
      set_fact:
        basedirlnx: "{{ binpathpsql.stdout[:-4] }}"
        postmasterloc: "{{ binpathpsql.stdout[:-4] }}postmaster"
      when: "'RedHat' in ansible_distribution"
    
    - name: check latest version  (linux)
      debug:
        var: postmasterloc
      when: "'RedHat' in ansible_distribution"


    - name: get datadirectory postgre
      shell: ps aux | grep "{{ postmasterloc }}" | grep -oP '(?<=-D )\S+'
      register: chkdatadir
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"

    
    - name: Clean Data Dir
      set_fact:
        pgdatadir: "{{ chkdatadir.stdout_lines[0] }}"
      when: "'RedHat' in ansible_distribution"


    - name: Find superuser 
      shell: ps -ef | grep postmaster | grep -v grep | awk '{print $1}' | uniq
      register: superusername
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"


   
    - name: Get Installed Version 2 (linux)
      command: sudo -u {{ superusername.stdout }} psql --version
      register: pgdataver
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"

   
    - name: cleanver 
      set_fact:
        pgdataverclean: "{{ pgdataver.stdout | regex_search('([0-9]+\\.[0-9]+)', '\\1') }}"
        majorver: "{{ pgdataver.stdout | regex_search('([0-9]+)', '\\1') }}"
      when: 
        - "'RedHat' in ansible_distribution"
    
    

    - name: Retrieve PostgreSQL port
      ansible.builtin.shell: "sudo lsof -i -P -n | grep postgres | awk '{print $9}' | sed 's/.*://' | head -n 1"
      register: portpostgre
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"  


    # - name: test port  (linux)
    #   debug:
    #     var: testpostgre
    #   when: "'RedHat' in ansible_distribution"
   

    - name: Get mode
      ansible.builtin.shell: "if [ -f {{ pgdatadir }}recovery.signal ]; then echo 'true'; else echo 'false'; fi"
      register: modepostgre
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"  
   
    
    - name: Set mode 
      set_fact:
        psqlmode: 'standalone'
      when: 
        - "'RedHat' in ansible_distribution"
        - "modepostgre.stdout != 'true'" 
    
    - name: Set fact data dir (linux)
      set_fact:
        datadirlnx: "{{ pgdatadir }}"
        datadirshrt: "{{ pgdatadir[:-7] }}"
        postgres_version: "{{ pgdataverclean[0] }}"
        major_ver: "{{ majorver[0] }}"
        portdb: "{{ portpostgre.stdout }}"
        superusers: "{{ superusername.stdout}}"
      when: "'RedHat' in ansible_distribution"


    - name: Version Check  (linux)
      debug:
        var: postgres_version
      when: "'RedHat' in ansible_distribution"

    - name: Major Version Check  (linux)
      debug:
        var: major_ver
      when: "'RedHat' in ansible_distribution"

   
    - name: Push custom attributes to selected server
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        server_details = ts.server.ServerService.getServerVO(server_ref)
                        CAMap = {'postgre_version':'{{ postgresql_version}}', 'postgresql_datadir': '{{ datadirlnx }}', 'postgresql_home':'{{ basedirlnx }}', 'postgresql_user': '{{ superusers }}', 'postgresql_port': '{{ portdb }}', 'postgresql_mode': '{{ psqlmode }}'}
                        ts.server.ServerService.setCustAttrs(server_ref, CAMap)
                        print("ok")
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: python_output
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"

    - name: Display Python script output
      debug:
        msg: "{{ python_output.stdout }}" 
      when: "'RedHat' in ansible_distribution"
   
    

    #Windows Host Script
    - set_fact:
        ethernet0_ip: "{{ ansible_facts.interfaces | selectattr('connection_name', 'search', 'Ethernet0') | map(attribute='ipv4.address') | first }}"
      when: "'Windows' in ansible_distribution"

    - name: Get PostgreSQL installation base directory from registry (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Installations
      register: postgres_installations
      when: "'Windows' in ansible_distribution"
    
    - name: Get PostgreSQL installation base directory from registry (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Services
      register: postgres_services
      when: "'Windows' in ansible_distribution"

    - name: Get Global PostgreSQL (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL Global Development Group\PostgreSQL
      register: postgresglobal
      when: "'Windows' in ansible_distribution"
    
    - name: Check Postgre Installed Ver (windows)
      debug:
        msg: "PostgreSQL {{ postgresglobal.properties['Version']['value'] }}"   
      when: "'Windows' in ansible_distribution"

    - name: Get the first installation ID (windows)
      set_fact:
        installation_id: "{{ postgres_installations.sub_keys[0] }}"
        services_id: "{{ postgres_services.sub_keys[0] }}"
      when: "'Windows' in ansible_distribution"

    - name: Retrieve installation directory (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Installations\{{ installation_id }}
      register: postgres_installation_dir2
      when: "'Windows' in ansible_distribution"

    - name: Retrieve services directory (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Services\{{ services_id }}
      register: postgres_services_dir2
      when: "'Windows' in ansible_distribution"


    
    
   
    - name: Set fact base dir (windows)
      set_fact:
        basedir: "{{ postgres_installation_dir2.properties['Base Directory']['value'] }}"
        datadir: "{{ postgres_installation_dir2.properties['Data Directory']['value'] }}"
        installedver: "{{ postgresglobal.properties['Version']['value'] }}"
        CompleteVer: "{{ postgres_installation_dir2.properties['CLT_Version']['value'] }}"
        serviceid: "{{ postgres_installation_dir2.properties['Service ID']['value'] }}"
        superuser: "{{ postgres_installation_dir2.properties['Super User']['value'] }}"
        postgreport: "{{ postgres_services_dir2.properties['Port']['value'] }}"
      when: "'Windows' in ansible_distribution"

 
    - name: Check if recovery.signal file exists
      win_stat:
        path: "{{ datadir }}\\recovery.signal"  # Adjust this path as needed
      register: postgremode
      when: "'Windows' in ansible_distribution"

    - name: Display if recovery.signal exists
      debug:
        msg: "The recovery.signal file exists."
      when: 
        - "'Windows' in ansible_distribution"
        - postgremode.stat.exists

    - name: Display if recovery.signal does not exist
      debug:
        msg: "The recovery.signal file does not exist."
      when: 
        - "'Windows' in ansible_distribution"
        - not postgremode.stat.exists
        

    - name: Set mode (windows)
      set_fact:
        psqlmode: 'standalone'
      when: 
        - "'Windows' in ansible_distribution"
        - "not postgremode.stat.exists" 

    - name: Set fact port  (windows)
      set_fact:
        portpsql: "{{ postgreport }}"
      when: "'Windows' in ansible_distribution"
       
   

    - name: Create a temporary Python script file
      win_shell: |
        $script = @"
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ethernet0_ip }}" :
                    try:
                        server_details = ts.server.ServerService.getServerVO(server_ref)
                        CAMap = {'postgresql_version':'{{ CompleteVer }}', 'postgresql_datadir': '{{ datadir }}', 'postgresql_home':'{{ basedir }}','postgresql_user': '{{ superuser }}', 'postgresql_port': '{{ portpsql }}', 'postgresql_mode': '{{ psqlmode }}'}
                        ts.server.ServerService.setCustAttrs(server_ref, CAMap)
                        print("ok")
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)
        "@
        $script | Out-File -FilePath C:\pushcustomattr.py -Encoding UTF8
      when: "'Windows' in ansible_distribution"

    - name: Execute the Python script
      win_shell: |
        cd "C:\Program Files\Opsware\agent\python3"
        .\python C:\pushcustomattr.py
      register: result
      when: "'Windows' in ansible_distribution"

    - name: Display the output
      debug:
        var: result.stdout
      when: "'Windows' in ansible_distribution"

    - name: Remove the temporary Python script
      win_file:
        path: C:\pushcustomattr.py
        state: absent
      when: "'Windows' in ansible_distribution"
    

      
    

    # - name: Stop PostgreSQL 15 service (windows)
    #   win_service:
    #     name: "{{ serviceid }}"
    #     state: stopped
    #   when: "'Windows' in ansible_distribution"

    # - name: Backup PostgreSQL data directory (windows)
    #   win_command: >
    #     powershell -command "Copy-Item -Path '{{ datadir }}' -Destination 'C:\PostgreSQL_Backup' -Recurse"
    #   when: "'Windows' in ansible_distribution"

    # - name: Download PostgreSQL 16 installer (windows)
    #   win_get_url:
    #     url: "{{ urlpatch }}"
    #     dest: C:\{{ installername }}
    #   when: "'Windows' in ansible_distribution"

    # - name: Install PostgreSQL 15 (windows)
    #   win_command: >
    #     powershell -command "Start-Process -FilePath 'C:\{{ installername }}' -ArgumentList '--unattendedmodeui minimal --mode unattended --prefix "{{ basedir }}" --datadir "{{ datadir }}"' -Wait"
    #   register: install_output
    #   when: "'Windows' in ansible_distribution"

    # - name: Print install output (windows)
    #   debug:
    #     var: install_output
    #   when: "'Windows' in ansible_distribution"

    # - name: Start PostgreSQL 15 service (windows)
    #   win_service:
    #     name: "{{ serviceid }}"
    #     state: started
    #   when: "'Windows' in ansible_distribution"


    




    