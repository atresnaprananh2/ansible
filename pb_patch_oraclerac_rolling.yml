- name: Automate SQL Server Cluster Patching
  hosts: oracleRAC1
  gather_facts: true
  remote_user: root #remove when running on SA Client
  become: true #remove when running on SA Client
  become_user: root #remove when running on SA Client
  vars:
    - dest: C:\Temp
    - dest2: C:\
    - isupdateopatch: "N"
  tasks:

    - name: Preparation - Get Software Policy Attr
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        print(ts.server.ServerService.getCustAttrs(server_ref, None, True) )
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: instattr
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"
    
    - name:  Preparation - setcustattr
      set_fact:
        custattr: "{{ instattr.stdout }}"
      when: "'RedHat' in ansible_distribution"

    - name:  Preparation - set variables
      set_fact:
        ansible_python_interpreter: "/opt/opsware/agent/bin/python3"
        patchname: "{{ custattr.oracle_patchname }}"
        patchid: "{{ custattr.oracle_patchid }}"
        isupdateopatch: "{{ custattr.isupdateopatch }}"

      when: "'RedHat' in ansible_distribution"

    - name:  Preparation - set variables to update opatch
      set_fact:
        opatchname: "{{ custattr.oracle_opatchname }}"
        opatchid: "{{ custattr.oracle_opatchid }}"
      when: 
        - "'RedHat' in ansible_distribution"
        - isupdateopatch == "Y"

    - name: Extract the number after 'p' and before '_'
      set_fact:
        patch_number: "{{ patchname | regex_search('p(\\d+)_', '\\1') }}"
    
    - name: Debug patch number
      debug:
        var: patch_number

    - name:  Preparation - set variables 2
      set_fact:
        oneoff_patch_dir_int: '{{ patchname | replace("p", "", 1) }}'
      when: "'RedHat' in ansible_distribution"
    
    - name: Get Oracle User
      shell: ps -ef | grep ora_pmon | grep -v grep | awk '{print $1}' | uniq
      register: oracle_user
      when: "'RedHat' in ansible_distribution"
    
    - name: "get user grid"
      shell: ps -eo user,args | grep -E "crsd\.bin|ocssd\.bin|evmd\.bin" | grep -v grep | awk '{print $1}' | sort | uniq | grep -v root 
      register: usergrid

    - name: "get oraclehome"
      shell: sudo -u {{ oracle_user.stdout }} bash -c 'source ~/.bash_profile && echo $ORACLE_HOME'
      register: orahome

    - name: Find grid home
      command:  sudo -u {{ usergrid.stdout }} bash -c '. ~/.bash_profile;echo $ORACLE_HOME' 
      register: gridhome
      args:
        chdir: '/var/lib'
     
   
    

    #method ssh
    - name: Get the list of RAC nodes
      shell: |
         su - {{ oracle_user.stdout }} -c "{{ gridhome.stdout }}/bin/olsnodes -n -i | awk '{print \$1}'"
      register: node_lists
    
    - name: Debug nodes detected
      debug:
        var: node_lists

    - name: Parse the node list
      set_fact:
        rac_nodes: "{{ node_lists.stdout_lines }}"

    - name: Debug nodes detected
      debug:
        msg: "Nodes detected: {{ rac_nodes }}"


    - name: get secondary node
      set_fact:
        secondarynode: "{{ rac_nodes | reject('equalto', ansible_facts.hostname) | list }}"

    - name: Show filtered list
      debug:
        var: secondarynode[0]


    - name: Extract the node name from the PowerShell output
      set_fact:
        main_node: ansible_facts.hostname

    - name: get credential fileid
      run_once: true
      shell: "{{ ansible_python_interpreter }} -"
      args:
        stdin: |
          from pytwist import * 
          from pytwist.com.opsware.search import Filter
          from pytwist.com.opsware.pkg import *3
          ts = twistserver.TwistServer()
          pkgsvc = ts.pkg.UnknownPkgService
          filter2 = Filter()
          packages = pkgsvc.findUnknownPkgRefs(filter2)
          for package in packages:
              if package.name == "cred.b64":
                print(package.id)
      register: pkgname

    - name: chk pkgname
      debug:
        var: pkgname.stdout
    
    - name: download credentials
      command: "{{ ansible_python_interpreter }}"
      args:
        stdin: >
          from coglib import downloader;

          downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{ pkgname.stdout }},None,None,'cred.b64', None, '/opt/opsware'))
      register: test
      when: "'RedHat' in ansible_distribution"   
      tags: download,remote

    - name: decode username
      run_once: true
      shell: "{{ ansible_python_interpreter }} -"
      args:
        stdin: |
          import base64

          # Read from the .b64 file
          with open("/opt/opsware/cred.b64", "r") as file:
              encoded = file.read().strip()

          # Decode Base64
          decoded = base64.b64decode(encoded).decode('utf-8')

          # Split into username and password
          username, password = decoded.split(":", 1)  # The 1 ensures only the first ":" is used

          print(decoded)

      register: credentials
    
    - name: chk pkgname
      debug:
        var: credentials.stdout

    - name: Split username and password
      set_fact:
        sa_username: "{{ credentials.stdout.split(':')[0] }}"
        sa_password: "{{ credentials.stdout.split(':')[1] }}"

   

    - name: Get secondary node MIDs as JSON list
      run_once: true
      shell: "{{ ansible_python_interpreter }} -"
      args:
        stdin: |
          import json
          from pytwist import *
          from pytwist.com.opsware.search import Filter
          from pytwist import twistserver

          ts = twistserver.TwistServer()
          ts.authenticate("{{ sa_username }}", "{{ sa_password }}")

          server_service = ts.server.ServerService
          servers = server_service.findServerRefs(Filter())

          secondary = {{ secondarynode | to_json }}
          mids = []

          for srv in servers:
              server_vo = server_service.getServerVO(srv)
              short_name = server_vo.name.split('.')[0]
              if short_name in secondary:
                  mids.append(server_vo.mid)

          print(json.dumps(mids))
      register: getsecondnodeid
      changed_when: false




    - name:  Preparation - set device id attr
      set_fact:
        deviceid: "{{ getsecondnodeid.stdout | from_json }}"
    
    - name: Debug the active node output
      debug:
        var: deviceid

    - name: Print each device ID
      debug:
        msg: "Device ID: {{ item }}"
      loop: "{{ deviceid }}"

    - name: RAC Loop patching
      shell: "{{ ansible_python_interpreter }} -"
      args:
        stdin: |
          from pytwist.com.opsware.job import JobRef
          import time
          from pytwist import twistserver
          from pytwist.com.opsware.script import ServerScriptJobArgs
          from pytwist.com.opsware.server import ServerRef

          # Authenticate to the TwistServer
          ts = twistserver.TwistServer()
          ts.authenticate("{{ sa_username }}", "{{ sa_password }}")

          # Set up script execution arguments
          args = ServerScriptJobArgs()
          args.targets = [ServerRef({{ item }})]

          args.tailOutputSize = 10 * 1024  # Capture last 10 KB of output
          args.timeOut = 7200    # Timeout after 2 hrs

          userTag = "adHoc SHELL script"

          # PowerShell script to create and execute the Python script
          source = '''
          {% if isupdateopatch == "Y" %}
          # Step 0: Download latest OPatch using embedded Python
          cat > /tmp/opatchdownload.py <<EOF
          from coglib import downloader

          downloader.Tsunami().fetch_unit(
              downloader.DownloadUnit({{ opatchid }}, None, None, '{{ opatchname }}', None, '/opt/opsware')
          )
          EOF

          /opt/opsware/agent/bin/python3 /tmp/opatchdownload.py
          rm -f /tmp/opatchdownload.py

          # Step 0.1: Replace old OPatch
          su - {{ oracle_user.stdout }} <<'EOOPATCH'
          mv {{ orahome.stdout }}/OPatch {{ orahome.stdout }}/OPatch_bak
          unzip -o /opt/opsware/{{ opatchname }} -d {{ orahome.stdout }}
          EOOPATCH
          {% endif %}

          # Step 1: Download the patch using embedded Python
          cat > /tmp/otsadownload.py <<EOF
          from coglib import downloader

          downloader.Tsunami().fetch_unit(
              downloader.DownloadUnit({{ patchid }}, None, None, '{{ patchname }}', None, '/opt/opsware')
          )
          EOF

          /opt/opsware/agent/bin/python3 /tmp/otsadownload.py
          rm -f /tmp/otsadownload.py
           

          #shut off listener
          su - {{ usergrid.stdout }} <<'EOGRIDSTOP'
          # Stop listener
          lsnrctl stop

          EOGRIDSTOP

           # Step 3: Switch to oracle user and perform the patching sequence
          su - {{ oracle_user.stdout }} <<'EOORACLE'
        
          mkdir $ORACLE_HOME/patches
          unzip -o /opt/opsware/{{ patchname }} -d $ORACLE_HOME/patches

          # Shut down DB instance
          sqlplus / as sysdba <<EOSQL
          shutdown immediate;
          exit;
          EOSQL

          # Apply the patch
          cd $ORACLE_HOME/patches
          $ORACLE_HOME/OPatch/opatch apply -silent -oh $ORACLE_HOME {{ patch_number[0] }}


          rm -rf $ORACLE_HOME/patches
          EOORACLE

          #turn on  listener
          su - {{ usergrid.stdout }} <<'EOGRIDSTART'
          # Stop listener
          lsnrctl start

          EOGRIDSTART

          #turn on  listener
          su - {{ oracle_user.stdout }} <<'EODBSTART'
          # Start DB instance
          sqlplus / as sysdba <<EOSQL
          startup;
          exit;
          EOSQL

          EODBSTART

          $ORACLE_HOME/OPatch/datapatch -verbose


          # Step 4: Clean up
          rm -rf /opt/opsware/{{ patchname }}
          '''

          codeType = 'SH'  # Running a batch script that invokes PowerShell

          # Execute the script via OpenText Server Automation
          jobRef = ts.script.ServerScriptService.startAdhocServerScript(source, codeType, args, userTag, None, None)

          print(f"Created job {jobRef.getId()}, waiting for completion...")

          # Wait until the job completes
          max_wait_time = 7200 
          start_time = time.time()

          while True:
              try:
                  job_info = ts.job.JobService.getJobInfoVO(JobRef(jobRef.getId()))
                            
                  if job_info is None:
                      print(f"Failed to retrieve job info for {jobRef.getId()}. Exiting loop.")
                      break

                  # Check if the job has finished
                  if job_info.status in [2, 3, 4, 6]:  # Completed, Failed, or Canceled
                      print(f"Job {jobRef.getId()} finished with status: {job_info.status}")
                      break

                  print(f"Job {jobRef.getId()} is still running (status={job_info.status})...")
                            
              except Exception as e:
                  print(f"Error retrieving job info: {e}")
                  break

              # Timeout condition
              if time.time() - start_time > max_wait_time:
                  print(f"Timeout reached while waiting for job {jobRef.getId()}. Exiting loop.")
                  break

              time.sleep(10)  # Wait before checking again
      register: result
      loop: "{{ deviceid }}"

    - name: debug result
      debug:
        var: result

 

    - name: check orahome
      debug:
        var: orahome

    - name: Prerequisite --- download opatch file
      command: "{{ ansible_python_interpreter }}"
      args:
        stdin: >
          from coglib import downloader;

          downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{ opatchid }},None,None,'{{ opatchname }}', None, '/opt/opsware'))
      register: test
      when: 
        - "'RedHat' in ansible_distribution"
        - isupdateopatch == "Y"
      tags: download,remote
    
    - name: Step 11 --- rename opatch dir
      command: "mv {{ orahome.stdout }}/OPatch {{ orahome.stdout }}/OPatch_bak"
      #when: (system_opatch_version is version_compare(minimum_required_opatch_version, '<'))
      when: 
        - "'RedHat' in ansible_distribution"
        - isupdateopatch == "Y"
      tags:
        - prep

    - name: Step 12 --- Install the latest OPatch ({{ opatch_latest_zip }})
      ansible.builtin.unarchive:
        src: '/opt/opsware/{{ opatchname }}'
        dest: '{{ orahome.stdout }}'
        remote_src: yes
        keep_newer: true 
        owner: oracle
      #when: (system_opatch_version is version_compare(minimum_required_opatch_version, '<'))
      when: 
        - "'RedHat' in ansible_distribution"
        - isupdateopatch == "Y"
      tags:
        - prep
        
   

    - name: Prerequisite --- download patch file
      command: "{{ ansible_python_interpreter }}"
      args:
        stdin: >
          from coglib import downloader;

          downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{patchid}},None,None,'{{patchname}}', None, '/opt/opsware'))
      register: test
      tags: download,remote

    - name: Ensure $ORACLE_HOME/patches directory exists
      command: sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile; mkdir -p $ORACLE_HOME/patches'

    - name: Unzip patch file to $ORACLE_HOME/patches
      command: sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile; unzip -oq /opt/opsware/{{ patchname }} -d $ORACLE_HOME/patches'

    - name: "Step 26 --- Stop the named listeners"
      command: sudo -u {{ usergrid.stdout }} bash -c '. ~/.bash_profile;lsnrctl stop' 
        # when: "oracle_binary_version | splitVersion == '12'"
      tags:
        - patching

    - name: Step 17 --- Create shutdown script for Oracle
      copy:
        dest: /opt/opsware/stopDatabase.sh
        content: |
          sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile; sqlplus / as sysdba' << EOF
          shutdown immediate;
          exit
          EOF
        owner: "{{ oracle_user.stdout }}"
        group: oinstall
        mode: '0750'

    - name: Step 18 --- Shutdown Oracle database 
      command: sh '/opt/opsware/stopDatabase.sh'
      register: chkrslt
    
    - name: delete shutdown script file
      file:
        path: /opt/opsware/stopDatabase.sh
        state: absent

    - name: Step 23 b --- install patch
      command: >
        sudo -u {{ oracle_user.stdout }} bash -c ". ~/.bash_profile && $ORACLE_HOME/OPatch/opatch apply -oh $ORACLE_HOME -silent {{ orahome.stdout }}/patches/{{ patch_number[0] }}"
      ignore_errors: yes
      when: 
        - "'RedHat' in ansible_distribution"


    - name: "Step 24 --- verify patching"
      command:  sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile;$ORACLE_HOME/OPatch/opatch lsinventory' 
      register: chkpatch2
      tags:
        - prep

    - name: Step 25 --- check patching result
      debug:
        msg:
          - "{{ chkpatch2 }}"
   
    - name: "Step 26 --- Start the named listeners which were stopped from the {{ oracle_binary_version }} home"
      command: sudo -u {{ usergrid.stdout }} bash -c '. ~/.bash_profile;lsnrctl start' 
      tags:
        - patching

    - name: Step 27 ---  Create startup script for Oracle
      copy:
        dest: /opt/opsware/startDatabase.sh
        content: |
          sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile; sqlplus / as sysdba' << EOF
          startup;
          exit
          EOF
        owner: "{{ oracle_user.stdout }}"
        group: oinstall
        mode: '0750'

    - name: Step 28 --- start Oracle database 
      command: sh '/opt/opsware/startDatabase.sh'
      register: chkrsltstart
    
    - name: delete startup script file
      file:
        path: /opt/opsware/startDatabase.sh
        state: absent
    
    - name: Step 29 --- check start db
      debug:
        var: chkrsltstart
      when: "'RedHat' in ansible_distribution"

    - name: Step 29 --- Run datapatch after Oracle restart
      command: sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile; $ORACLE_HOME/OPatch/datapatch -verbose'
      register: datapatch_output

    - name: Step 30 --- Show datapatch output
      debug:
        var: datapatch_output.stdout_lines


    - name: "Final --- Remove the Ansible patching directory"
      file:
        path: '{{ orahome.stdout }}/patches'
        state: absent
      tags:
        - final
        - post
    - name: "Final --- Remove the Ansible patching file"
      file:
        path: '/opt/opsware/{{ patchname }}'
        state: absent
      tags:
        - final
        - post
    - name: "Final --- Remove the credential file"
      file:
        path: '/opt/opsware/cred.b64'
        state: absent
      tags:
        - final
        - post


        
        




    