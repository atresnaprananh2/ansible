- hosts: all
  gather_facts: yes
  name: System Discovery
  vars:   
    db2fixpack: 'NA'
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:

    - name: Display OS distribution and version (linux)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts['default_ipv4']['address'] }}"
      when: "'Windows' not in ansible_distribution"
    
    - name: Display OS distribution and version (windows)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts.ip_addresses[1] }}"
      when: "'Windows' in ansible_distribution"

    #linux script
  
    - name: Check db2 user
      shell: "cat /etc/group | grep db2 | awk -F: '{print $1}'"
      register: db2user
      ignore_errors: yes
      when: "'RedHat' in ansible_distribution"
    
    - name: chk1
      debug:
        var: db2user
      when: "'RedHat' in ansible_distribution"

    - name: Get Db2 version using db2level
      shell: "sudo -i -u db2inst1 db2level"
      register: db2_output
      ignore_errors: true
      when: "'RedHat' in ansible_distribution"

    - name: Extract Db2 version using awk
      shell: "echo '{{ db2_output.stdout }}' | awk -F'\"' '/Informational tokens/ {print $2}'"
      register: db2_version
      when: 
        - db2_output.stdout is defined
        - "'RedHat' in ansible_distribution"

    - name: Display Db2 version
      debug:
        msg: "Db2 version: {{ db2_version.stdout }}"
      when: "'RedHat' in ansible_distribution"
    
    
    - name: Extract Db2 special build using awk
      shell: "echo '{{ db2_output.stdout }}' | awk -F'\"' '/Informational tokens/ {print $4}'"
      register: db2_special_build
      when: 
        - db2_output.stdout is defined
        - "'RedHat' in ansible_distribution"

    - name: Display Db2 special build
      debug:
        msg: "Db2 special build: {{ db2_special_build.stdout }}"
      when: "'RedHat' in ansible_distribution"
    
    - name: Get Db2 user home directory
      ansible.builtin.shell: |
        getent passwd db2inst1 | cut -d: -f6
      register: db2_home
      when: "'RedHat' in ansible_distribution"
  
    - name: Show Db2 home path
      ansible.builtin.debug:
        msg: "Db2 home directory: {{ db2_home.stdout }}"
      when: "'RedHat' in ansible_distribution"
    
    - name: Get db 2 installation path 
      shell: "find /opt -name db2 -type f 2>/dev/null"
      register: db2installationpath
      when: "'RedHat' in ansible_distribution"
    
    - name: Show Db2 installation path
      ansible.builtin.debug:
        msg: "Db2 installation directory: {{ db2installationpath.stdout }}"
      when: "'RedHat' in ansible_distribution"
    
    - name: Show Db2 Home path
      ansible.builtin.debug:
        var: db2_home
      when: "'RedHat' in ansible_distribution"

    - name: Get Db2 root free space
      ansible.builtin.shell: |
        df -h "$(dirname $(dirname {{ db2installationpath.stdout }}))"
      register: db2_free_space
      when: "'RedHat' in ansible_distribution"
    
    - name: Debug raw output
      debug:
        var: db2_free_space.stdout
      when: "'RedHat' in ansible_distribution"

    - name: Show Db2 free root space
      ansible.builtin.debug:
        var:  db2_free_space.stdout.splitlines()[1]
      when: "'RedHat' in ansible_distribution"
      

    - name: set variables
      set_fact:
        db2availspace: "{{  db2_free_space.stdout.splitlines()[1].split()[3]  }}"
        db2user: "{{ db2user.stdout_lines | join(';') }}"
        db2ver: "{{ db2_version.stdout }}"
        db2home: "{{ db2_home.stdout }}"
        db2path: "{{ db2installationpath.stdout }}"
      when: "'RedHat' in ansible_distribution"
      
    - name: set variables 2
      set_fact:
        db2fixpack: "{{ db2_special_build.stdout }}" 
      when: 
        - "'RedHat' in ansible_distribution"
        - db2_output.stdout is defined

    - name: Push custom attributes to selected server
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        server_details = ts.server.ServerService.getServerVO(server_ref)
                        CAMap = {'db2_rootspace':'{{ db2availspace }}', 'db2_user':'{{ db2user }}', 'db2_ver':'{{ db2ver }}', 'db2_specialbuilds':'{{ db2fixpack }}', 'db2_home':'{{ db2home }}', 'db2_installationpath':'{{ db2path }}'}
                        ts.server.ServerService.setCustAttrs(server_ref, CAMap)
                        print("ok")
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: python_output
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"

    - name: Display Python script output
      debug:
        msg: "{{ python_output.stdout }}" 
      when: "'RedHat' in ansible_distribution"


    #AIX Script section
    - name: Check db2 user
      shell: "lsuser -a groups ALL | grep db2 | awk '{print $1}'"
      register: db2user
      ignore_errors: yes
      when: "'AIX' in ansible_distribution"

    - name: set dbuser
      set_fact:
        dbuser: "{{ db2user.stdout_lines[0] }}"
      when: "'AIX' in ansible_distribution"
    
    - name: chk1
      debug:
        var: db2user
      when: "'AIX' in ansible_distribution"

    - name: Get Db2 version using db2level
      shell: su - {{ dbuser }} -c "db2level"
      register: db2_output
      ignore_errors: true
      when: "'AIX' in ansible_distribution"

    - name: Extract Db2 version using awk
      shell: "echo '{{ db2_output.stdout }}' | awk -F'\"' '/Informational tokens/ {print $2}'"
      register: db2_version
      when: 
        - db2_output.stdout is defined
        - "'AIX' in ansible_distribution"

    - name: Display Db2 version
      debug:
        msg: "Db2 version: {{ db2_version.stdout }}"
      when: "'AIX' in ansible_distribution"

    - name: Extract Db2 special build using awk
      shell: "echo '{{ db2_output.stdout }}' | awk -F'\"' '/Informational tokens/ {print $4}'"
      register: db2_special_build
      when: 
        - db2_output.stdout is defined
        - "'AIX' in ansible_distribution"

    - name: Display Db2 special build
      debug:
        msg: "Db2 special build: {{ db2_special_build.stdout }}"
      when: "'AIX' in ansible_distribution"
    
    - name: Get Db2 user home directory
      ansible.builtin.shell: |
        lsuser -a home db2inst1 | awk '{print $2}' | cut -d= -f2
      register: db2_home
      when: "'AIX' in ansible_distribution"
  
    - name: Show Db2 home path
      ansible.builtin.debug:
        msg: "Db2 home directory: {{ db2_home.stdout }}"
      when: "'AIX' in ansible_distribution"
    
    - name: Get db 2 installation path 
      shell: "find /opt -name db2 -type f 2>/dev/null"
      register: db2installationpath
      when: "'AIX' in ansible_distribution"
    
    - name: Show Db2 installation path
      ansible.builtin.debug:
        msg: "Db2 installation directory: {{ db2installationpath.stdout }}"
      when: "'AIX' in ansible_distribution"
    
    - name: Show Db2 Home path
      ansible.builtin.debug:
        var: db2_home
      when: "'AIX' in ansible_distribution"

    
    
    - name: Get Db2 root free space
      ansible.builtin.shell: |
       df -g "$(dirname $(dirname /opt/IBM/db2/V11.5/bin/db2))" | awk 'NR==2 {print $3}'

      register: db2_free_space
      when: "'AIX' in ansible_distribution"
    
    - name: Debug raw output
      debug:
        var: db2_free_space.stdout
      when: "'AIX' in ansible_distribution"


    - name: set variables
      set_fact:
        db2availspace: "{{  db2_free_space.stdout }}"
        db2user: "{{ db2user.stdout_lines | join(';') }}"
        db2ver: "{{ db2_version.stdout }}"
        db2home: "{{ db2_home.stdout }}"
        db2path: "{{ db2installationpath.stdout }}"
      when: "'AIX' in ansible_distribution"
      
    - name: set variables 2
      set_fact:
        db2fixpack: "{{ db2_special_build.stdout }}" 
      when: 
        - "'AIX' in ansible_distribution"
        - db2_output.stdout is defined

    - name: Push custom attributes to selected server
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        server_details = ts.server.ServerService.getServerVO(server_ref)
                        CAMap = {'db2_rootspace':'{{ db2availspace }} GB', 'db2_user':'{{ db2user }}', 'db2_version':'{{ db2ver }}', 'db2_specialbuilds':'{{ db2fixpack }}', 'db2_home':'{{ db2home }}', 'db2_installationpath':'{{ db2path }}'}
                        ts.server.ServerService.setCustAttrs(server_ref, CAMap)
                        print("ok")
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: python_output
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'AIX' in ansible_distribution"

    - name: Display Python script output
      debug:
        msg: "{{ python_output.stdout }}" 
      when: "'AIX' in ansible_distribution"

    

      