- hosts: winmysql #change to all when testing on SA
  gather_facts: yes
  name: System Discovery

  vars:   
    #change the patch information if needed
    - mysqlpatch: http://172.19.2.98/patches/mysql-8.0.39-winx64.msi
    - userdir: "C:\\Users\\Administrator\\"
    - patchname: mysql-8.0.39-winx64.msi
    - patchfolder: mysql-8.0.39-winx64
    - productid: MySQL Server 8.0.39
    - mysql_installation_2: {}
    - mysql_installation: {}

  tasks:
    - name: Gather system facts
      ansible.builtin.setup:
  

    - name: Display OS distribution and version (linux)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts['default_ipv4']['address'] }}"
      when: "'Windows' not in ansible_distribution"
    
    - name: Display OS distribution and version (windows)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts.ip_addresses[1] }}"
      when: "'Windows' in ansible_distribution"

    #Windows Host Script

    - name: Validate if WOW6432Node registry key exists for Adobe Acrobat Reader
      win_reg_stat:
        path: 'HKLM:\SOFTWARE\WOW6432Node\MySQL AB\'
        state: present
      register: registry_check

    - name: Output registry check result
      debug:
        var: registry_check.exists
   

    - name: Get MySQL installation base directory from registry (windows x64)
      win_reg_stat:
        path: HKLM:\SOFTWARE\MySQL AB
      register: mysql_installation64
      when: 
        - "'Windows' in ansible_distribution"
        - "not registry_check.exists"

   
    
    - name: Get MySQL installation base directory from registry down by 1 level (windows x64)
      win_reg_stat:
        path: HKLM:\SOFTWARE\MySQL AB\{{ mysql_installation64.sub_keys[0] }}
      register: mysql_installation_264
      when: 
        - "'Windows' in ansible_distribution"
        - "not registry_check.exists"

    - name: Get MySQL installation base directory from registry (windows x86)
      win_reg_stat:
        path: HKLM:\SOFTWARE\WOW6432Node\MySQL AB
      register: mysql_installation86
      when: 
        - "'Windows' in ansible_distribution"
        - "registry_check.exists"
    
    - name: Get MySQL installation base directory from registry down by 1 level (windows x86)
      win_reg_stat:
        path: HKLM:\SOFTWARE\WOW6432Node\MySQL AB\{{ mysql_installation86.sub_keys[0] }}
      register: mysql_installation_286
      when: 
        - "'Windows' in ansible_distribution"
        - "registry_check.exists"

    - name: set path x64
      set_fact:
        mysql_installation: "{{ mysql_installation64 }}"
        mysql_installation_2: "{{ mysql_installation_264 }}"
      when: 
        - "'Windows' in ansible_distribution"
        - "not registry_check.exists" 

    - name: set path x86
      set_fact:
        mysql_installation: "{{ mysql_installation86 }}"
        mysql_installation_2: "{{ mysql_installation_286 }}"
      when: 
        - "'Windows' in ansible_distribution"
        - "registry_check.exists"


    - name: Set fact base dir (windows)
      set_fact:
        
        dataloc: "{{ mysql_installation_2.properties['DataLocation']['value']  }}"
        binloc: "{{ mysql_installation_2.properties['Location']['value'][:-1]  }}"
        mysqlversion: "{{ mysql_installation_2.properties['Version']['value']  }}"
    
    - name: Display the mysql bin
      debug:
        var: binloc
      when: "'Windows' in ansible_distribution"

    - name: Create my.cnf with UTF-8 encoding without BOM using PowerShell #change with the DB credentials that you have set up
      ansible.builtin.win_shell: |
        $content = @"
        [client]
        user=root
        password=Welcome123..
        "@
        $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
        [System.IO.File]::WriteAllLines("{{ userdir }}.my.cnf", $content, $utf8NoBomEncoding)
      when: "'Windows' in ansible_distribution"

   
    - name: Backup MySQL databases with mysqldump using defaults file
      ansible.builtin.win_shell: |
        .\mysqldump --defaults-file="{{ userdir }}.my.cnf" --all-databases > {{ userdir }}alldatabases_backup.sql
      args:
        chdir: "{{ binloc }}/bin" 
      when: "'Windows' in ansible_distribution"

    - name: Find MySQL services using sc query
      ansible.builtin.win_shell: |
        Get-Service | Where-Object {$_.DisplayName -like "*MySQL*"} | Select-Object DisplayName, Name, Status | Select-String -Pattern 'Name' | ForEach-Object { $_.Line.Split(' ')[1] }
      register: mysql_services
      when: "'Windows' in ansible_distribution"
    
    - name: Extract the actual name from the string
      set_fact:
        service_name: "{{ mysql_services.stdout.split('=')[1].split(';')[0] }}"
      when: "'Windows' in ansible_distribution"

    - name: Display the extracted service name
      debug:
        msg: "The service name is: {{ service_name }}"
      when: "'Windows' in ansible_distribution"

    - name: Download MySQL Patch
      win_get_url:
        url: '{{ mysqlpatch }}'
        dest: "{{ userdir }}"
      when: "'Windows' in ansible_distribution"

    - name: Install MySQL using MSI
      win_package:
        path: "{{ userdir }}{{ patchname }}"  # Replace with the actual path to the MSI file
        product_id: "{{ productid }}"
        state: present
        arguments: /quiet INSTALLDIR="{{ binloc }}"  # Adjust the install directory as needed
      register: rslt
    - name: resultins
      debug:
        msg: "{{ rslt }}"
      when: "'Windows' in ansible_distribution"
    
    - name: Restart MySQL service on Windows
      win_service:
        name: "{{ service_name }}"  # Change this if your MySQL service name is different
        state: restarted
    
    - name: Run mysqlcheck to verify database tables
      win_command: >
        .\mysqlcheck --defaults-file="{{ userdir }}.my.cnf" --all-databases
      register: mysqlcheck_result
      args:
        chdir: "{{ binloc }}/bin" 
      ignore_errors: yes  # Allow the playbook to continue even if an error occurs

    - name: Output mysqlcheck results
      debug:
        msg: "{{ mysqlcheck_result }}"

    - name: Check for tables that are not OK
      set_fact:
        tables_not_ok: "{{ mysqlcheck_result.stdout_lines | select('search', '^(?!.*OK$).*') | list }}"

    - name: Fail if there are tables that are not OK
      fail:
        msg: "The following tables are not OK: {{ tables_not_ok }}"
      when: tables_not_ok | length > 0

    - name: Debug to show which tables are OK and not OK (for troubleshooting)
      debug:
        msg: "Checked MySQL tables: {{ mysqlcheck_result.stdout_lines }}"

    - name: Clean up installer
      ansible.windows.win_file:
        path: "{{ userdir }}\\{{ patchname }}"
        state: absent

    - name: removebak if success
      ansible.windows.win_file:
          path: "{{ userdir }}alldatabases_backup.sql"
          state: absent
      when: tables_not_ok | length == 0

    - name: remove cnf if success
      ansible.windows.win_file:
          path: "{{ userdir }}.my.cnf"
          state: absent
      when: tables_not_ok | length == 0

    

    # zip method  
      # - name: Unzip MySQL 8.0.39
      #   win_unzip:
      #     src: "{{ userdir }}\\{{ patchname }}"
      #     dest: "{{ userdir }}\\mysqlnew"
      #     remote_src: yes

    
    
      # - name: Stop MySQL service
      #   ansible.windows.win_service:
      #     name: "{{ service_name }}"
      #     state: stopped


      # - name: Replace existing MySQL files
      #   ansible.windows.win_copy:
      #     src:  "{{ userdir }}mysqlnew\\{{ patchfolder }}\\"
      #     dest: C:\Program Files\MySQL\MySQL Server 8.0\
      #     remote_src: yes
      #     force: yes

      # - name: Run MySQL upgrade
      #   ansible.windows.win_command:
      #     cmd: .\mysql_upgrade --defaults-file="{{ userdir }}.my.cnf"
      #   args:
      #     chdir: "{{ binloc }}/bin" 
      #   register: upgrade_output

      # - name: Output upgrade results
      #   debug:
      #     var: upgrade_output.stdout_lines

      # - name: Start MySQL service
      #   ansible.windows.win_service:
      #     name: "{{ service_name }}"
      #     state: started
      #   ignore_errors: true



      # - name: Clean up temporary files
      #   ansible.windows.win_file:
      #     path: "{{ userdir }}\\{{ patchname }}"
      #     state: absent

      # - name: get installedver
      #   ansible.windows.win_command:
      #     cmd: .\mysql  --defaults-file=C:\Users\Administrator\.my.cnf -e "SELECT VERSION();"
      #   args:
      #     chdir: "{{ binloc }}/bin" 
      #   register: installedver

      # - name: Display Installed version
      #   debug:
      #     msg: "{{ installedver.stdout  }}"
      #   when: "'Windows' in ansible_distribution"
      # - name: Remove 'VERSION()' and '\r\n' from the string
      #   set_fact:
      #     clean_version: "{{ installedver.stdout | regex_replace('VERSION\\(\\)\\r\\n', '') | regex_replace('\\r\\n', '') }}"
      
      # - name: Set MySQL Version in Registry
      #   ansible.windows.win_shell: |
      #     # Define the registry path based on your installation type
      #     $mysqlRegistryPath = 'HKLM:\SOFTWARE\MySQL AB\{{ mysql_installation.sub_keys[0] }}'  # Use this for 64-bit MySQL

      #     # Set the new version value
      #     $newVersion = '{{ clean_version }}'

      #     # Update the Version key in the registry
      #     Set-ItemProperty -Path $mysqlRegistryPath -Name 'Version' -Value $newVersion

      #     # Verify the change
      #     Get-ItemProperty -Path $mysqlRegistryPath | Select-Object Version

   
   


    




    