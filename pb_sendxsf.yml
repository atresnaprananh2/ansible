---
- name: Create and Execute SA File Uploader on Windows Target
  hosts: wintestsvr  # <-- IMPORTANT: Change this to your Windows host group
  gather_facts: false

  vars:
    sa_core_username: "admin"
    sa_core_password: "opsware_admin" # <-- CHANGE THIS

    # ===================================================================
    #
    #   THE FIX: Using forward slashes in the paths to avoid YAML errors.
    #
    # ===================================================================
    opsware_python_path: "C:/Program Files/Opsware/agent/python3/python.exe"
    temp_script_path: "C:/temp/sa_upload_script.py"
    proc_script_path: "C:/temp/procxsf.py"

  tasks:

    - name: Create the Python script on the Windows target generate xsf
      ansible.windows.win_shell: |

        # Use a PowerShell Here-String to define the entire Python script
        $script = @"
        import os
        import sys
        import subprocess
        import shutil
        import time
        import logging
        import ctypes # Import ctypes to interact with Windows API
        
        # --- CONFIGURATION (same as before) ---
        BASE_DIRECTORY = r"C:\temp\ud_scanner"
        XSF_SOURCE_DIR = r"C:\ProgramData\Micro Focus\Universal-Discovery"
        RESULTS_DEST_DIR = os.path.join(BASE_DIRECTORY, "results")
        
        def setup_logging():
            # ... (same as before) ...
            os.makedirs(BASE_DIRECTORY, exist_ok=True)
            log_file = os.path.join(BASE_DIRECTORY, "scan_only_log.log")
            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s - %(levelname)s - %(message)s',
                filename=log_file,
                filemode='w'
            )
        
        def unhide_file(filepath):
            """Removes the 'Hidden' attribute from a file to make it visible."""
            try:
                # Windows API constant for the 'Hidden' attribute
                FILE_ATTRIBUTE_HIDDEN = 0x02
                attrs = ctypes.windll.kernel32.GetFileAttributesW(filepath)
                if attrs != -1 and (attrs & FILE_ATTRIBUTE_HIDDEN):
                    logging.info(f"File is hidden. Removing 'Hidden' attribute from: {os.path.basename(filepath)}")
                    # Use a bitwise AND with the NOT of the attribute to remove it
                    new_attrs = attrs & ~FILE_ATTRIBUTE_HIDDEN
                    ctypes.windll.kernel32.SetFileAttributesW(filepath, new_attrs)
                else:
                    logging.info("File is not hidden. No action needed.")
            except Exception as e:
                logging.warning(f"Could not unhide file '{filepath}'. Error: {e}")
        
        def main():
            setup_logging()
            logging.info("--- Script started: Scan, Move, and Unhide ---")
            try:
                # ... (Scan and move logic is the same as before) ...
                os.chdir(BASE_DIRECTORY)
                server_name = os.environ.get('COMPUTERNAME', 'default-server-name')
                executable_path = os.path.join(BASE_DIRECTORY, "udscan.exe")
                command = [executable_path, "-cfg:scan.cxz", f"-l:{server_name}.xsf"]
                result = subprocess.run(command, check=False, text=True, capture_output=True)
                if result.returncode != 0:
                    logging.error(f"udscan.exe failed with RC={result.returncode}. STDERR: {result.stderr}")
                    sys.exit(1)
                logging.info("Scan completed successfully.")
                source_xsf_path = os.path.join(XSF_SOURCE_DIR, f"{server_name}.xsf")
                os.makedirs(RESULTS_DEST_DIR, exist_ok=True)
                destination_path = os.path.join(RESULTS_DEST_DIR, f"{server_name}.xsf")
                if os.path.exists(destination_path):
                    os.remove(destination_path)
                shutil.move(source_xsf_path, destination_path)
                logging.info(f"File successfully moved to {destination_path}")
        
                # --- NEW STEP: Unhide the file ---
                unhide_file(destination_path)
        
            except Exception as e:
                logging.error("A critical error occurred.", exc_info=True)
                sys.exit(1)
            logging.info("--- Script finished successfully. ---")
            sys.exit(0)
        
        if __name__ == "__main__":
            main()
        "@

        # Write the PowerShell variable containing the script to a file on the Windows target
        $script | Out-File -FilePath "{{ proc_script_path }}" -Encoding UTF8

    - name: Execute the Python script on the Windows target
      ansible.windows.win_shell: |
        & "{{ opsware_python_path }}" "{{ proc_script_path }}"
      register: script_result

    - name: Display the script output
      ansible.builtin.debug:
        var: script_result.stdout_lines

    - name: Clean up the temporary Python script
      ansible.windows.win_file:
        path: "{{ proc_script_path }}"
        state: absent
    


    - name: Create the Python script on the Windows target
      ansible.windows.win_shell: |
        # Define Ansible variables as PowerShell variables
        $sa_user_ps = "{{ sa_core_username }}"
        $sa_pass_ps = "{{ sa_core_password }}"

        # Use a PowerShell Here-String to define the entire Python script
        $script = @"
        # ================================================================
        #
        #   BEGINNING OF THE PYTHON SCRIPT
        #
        # ================================================================
        import os
        import time
        import base64
        import hashlib
        from pytwist import twistserver
        from pytwist.com.opsware.job import JobRef
        from pytwist.com.opsware.script import ServerScriptJobArgs
        from pytwist.com.opsware.server import ServerRef

        xsf_dir = r'C:\temp\ud_scanner\results'
        remote_dir = '/var/tmp'
        sa_core_id = 10001
        sa_user = '$sa_user_ps'
        sa_pass = '$sa_pass_ps'

        try:
            ts = twistserver.TwistServer()
            ts.authenticate(sa_user, sa_pass)
            print("Successfully authenticated to the SA Core.")
        except Exception as e:
            print(f"Failed to authenticate. Aborting. Error: {e}")
            exit(1)

        for filename in os.listdir(xsf_dir):
            if not filename.lower().endswith('.xsf'):
                continue

            print("=" * 60)
            print(f"Starting process for file: {filename}")
            
            local_path = os.path.join(xsf_dir, filename)
            remote_path = f"{remote_dir}/{filename}"
            
            # --- STEP 1: TRANSFER THE FILE ---
            transfer_successful = False
            try:
                print(f"\n--- STEP 1: Transferring '{filename}' ---")
                
                with open(local_path, 'rb') as f:
                    file_content = f.read()
                encoded_content = base64.b64encode(file_content).decode('ascii')

                transfer_source = f"echo '{encoded_content}' | base64 --decode > {remote_path}"
                
                args = ServerScriptJobArgs()
                args.targets = [ServerRef(sa_core_id)]
                args.timeOut = 7200
                
                jobRef = ts.script.ServerScriptService.startAdhocServerScript(transfer_source, 'SH', args, f"Transfer file: {filename}", None, None)
                
                # --- YOUR PROVEN WAITING LOOP ---
                print(f"Created job {jobRef.getId()}, waiting for completion...")
                max_wait_time = 7200 
                start_time = time.time()
                job_info = None

                while True:
                    try:
                        job_info = ts.job.JobService.getJobInfoVO(JobRef(jobRef.getId()))
                        if job_info is None: break
                        if job_info.status in [2, 3, 4, 6]: break
                    except Exception as e: break
                    if time.time() - start_time > max_wait_time: job_info = None; break
                    time.sleep(10)

                if job_info and job_info.status == 6:
                    print("SUCCESS: Transfer job finished with status 6.")
                    transfer_successful = True
                else:
                    status = job_info.status if job_info else "Timed Out or Failed"
                    raise Exception(f"Job FAILED. Expected status 6 but loop finished with status {status}.")

            except Exception as e:
                print(f"CRITICAL ERROR in STEP 1 (Transfer): {e}")
                continue

            # --- STEP 2: PROCESS THE FILE ---
            if transfer_successful:
                try:
                    print(f"\n--- STEP 2: Processing '{filename}' on the SA Core ---")
                    
                    process_source = f'''
        /opt/opsware/software_import/oupload --pkgtype "Unknown" --os "Windows*" --folder "/Package Repository/All Windows" {remote_path}
        rm -f {remote_path}
        '''
                    args = ServerScriptJobArgs()
                    args.targets = [ServerRef(sa_core_id)]
                    args.timeOut = 7200
                    
                    jobRef = ts.script.ServerScriptService.startAdhocServerScript(process_source, 'SH', args, f"Process file: {filename}", None, None)
                    
                    print(f"Created job {jobRef.getId()}, waiting for completion...")
                    max_wait_time = 7200 
                    start_time = time.time()
                    job_info = None

                    while True:
                        try:
                            job_info = ts.job.JobService.getJobInfoVO(JobRef(jobRef.getId()))
                            if job_info is None: break
                            if job_info.status in [2, 3, 4, 6]: break
                        except Exception as e: break
                        if time.time() - start_time > max_wait_time: job_info = None; break
                        time.sleep(10)

                    if job_info and job_info.status == 6:
                        print(f"SUCCESS: File '{filename}' has been processed and cleaned up.")
                    else:
                        status = job_info.status if job_info else "Timed Out or Failed"
                        raise Exception(f"Processing Job FAILED. Expected status 6 but got {status}.")

                except Exception as e:
                    print(f"CRITICAL ERROR in STEP 2 (Processing): {e}")
                    continue
                
        print("=" * 60)
        print("All files processed.")
        # ================================================================
        #
        #   END OF THE PYTHON SCRIPT
        #
        # ================================================================
        "@

        # Write the PowerShell variable containing the script to a file on the Windows target
        $script | Out-File -FilePath "{{ temp_script_path }}" -Encoding UTF8

    - name: Execute the Python script on the Windows target
      ansible.windows.win_shell: |
        & "{{ opsware_python_path }}" "{{ temp_script_path }}"
      register: script_result

    - name: Display the script output
      ansible.builtin.debug:
        var: script_result.stdout_lines

    - name: Clean up the temporary Python script
      ansible.windows.win_file:
        path: "{{ temp_script_path }}"
        state: absent