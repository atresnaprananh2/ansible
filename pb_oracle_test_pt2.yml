  - hosts: all
    gather_facts: true
    
    vars:
      - binary_specific_oracle_sid: "orcl"
      - ansible_python_interpreter: /opt/opsware/agent/bin/./python3
      - oracle_binary_version: 12.2.0
      - oracle_home_path: /home/oracle/app/oracle/product/{{ oracle_binary_version }}/dbhome_1
      - oracle_prep_patch_dir: /home/oracle/Patching
      - ansible_patches_dir: /home/oracle/Ansible
      - oracle_script_prep: /home/oracle/Ansible
      - opatch_latest_zip_src: http://172.19.2.98/patches/p6880880_122010_Linux-x86-64.zip
      - oneoff_latest_zip_src: http://172.19.2.98/patches/p30463660_122010_Linux-x86-64.zip
      - pexpectinstaller: http://172.19.2.98/patches/pexpect-3.3.tar.gz
      - script_url: http://172.19.2.98/scripts/
      - opatch_latest_zip: p6880880_122010_Linux-x86-64.zip
      - oneoff_latest_zip: p30463660_122010_Linux-x86-64.zip
      - patchcode: 30502018
      - oracle_binary_version_int: '{{ oracle_binary_version | replace(".", "") }}'
      - opatch_version_int: '{{ opatch_version | replace(".", "") }}'
      - oneoff_patch_dir: p30463660
      - oneoff_patch_dir_int: '{{ oneoff_patch_dir | replace("p", "", 1) }}'
      - listener_file_path: '{{ oracle_script_prep }}/listenerOutput'
      - listenername: LISTENER

    environment:
      ORACLE_HOME: '{{ oracle_home_path }}'
      PATH: '{{ oracle_home_path }}/OPatch:/opt/ora/app/oracle:.:/bin:/usr/ccs/bin:/usr/bin:/usr/sbin:/usr/ucb:/usr/openwin/bin:/usr/local/bin:/opt/ora/app/oracle/lbin:/opt/ora/app/oracle/product/{{ oracle_binary_version }}/bin:/opt/ora/app/oracle/product/{{ oracle_binary_version }}/bin:/usr/local/bin/perl:/home/ORADBA/local_bin:/usr/local/sbin'
      ORACLE_BASE: '/opt/ora/app/oracle'
      LD_LIBRARY_PATH: '/usr/lib:/opt/ora/app/oracle/product/{{ oracle_binary_version }}/lib:/usr/dt/lib:/usr/ucblib'
      ORAENV_ASK: 'NO'
      HOME: /home/oracle
    
    tasks:
      - name: "Step 23 --- Make sure ORACLE_HOME is set to correct binaries"
        shell: echo $ORACLE_HOME
        changed_when: no
        tags:
          - debug
          - patching 

      - name: "Step 24 --- Identify all of the running listeners"
        shell: ps -ef | grep lsnr
        changed_when: no
        register: listenerOutput
        tags:
          - patching
        
      - name: "Step 25 --- Make sure the directory for the listeners filedrop exists"
        file:
          path: '{{ listener_file_path }}'
          state: directory
          owner: oracle
          mode: "u+rwx,g+rwx,o+rwx"
        tags:
          - debug
          - patching
      - name: "Step 26 --- Create a file to contain the binary specific SID(s) to iterate over"
        file:
          path: '{{ listener_file_path }}/listenerFile.txt'
          state: '{{ item }}'
          owner: oracle
        with_items:
          - absent
          - touch
        tags:
          - debug
          - patching

      # - name: "Step 27 --- Testing trim of stdout_lines for listenerOutput"
      #   shell: echo '{{ item | trim }}'
      #   changed_when: no
      #   with_items:
      #     - '{{ listenerOutput.stdout_lines }}'
      #   tags:
      #     - debug
      #     - patching
      
    
          
      # - name: "Step 28 --- Add the lsnr output content to listenerFile.txt"
      #   lineinfile:
      #     #path does not work in Ansible < v2.3
      #     dest: '{{ listener_file_path }}/listenerFile.txt'
      #     line: '{{ item | trim | binary_specific_oracle_sid }}'
      #   when: oracle_binary_version in item and not(('secora' or 'oitora') in item)
      #   with_items:
      #     - '{{ listenerOutput.stdout_lines }}'
      #   tags:
      #     - debug
      #     - patching
        
      # - name: "Step 29 --- Dynamically add binary relevant listener sids to a list that is looped through to stop and start relevant listeners"
      #   #This fact will be initialized as null if no SIDs are applicable - tasks that rely on this dictionary may be autoskipped
      #   set_fact: 
      #     ORACLE_LISTENER_SID: '{{ ORACLE_LISTENER_SID|default([]) + [ item | trim | binary_specific_oracle_sid ] }}'
      #   when: oracle_binary_version in item and not(('secora' or 'oitora') in item)
      #   with_items:
      #     - '{{ listenerOutput.stdout_lines }}'
      #   tags:
      #     - patching
      - name: "Step 30 --- Debug dynamically added sid fact"
        debug:
          msg: "ORACLE_LISTENER_SID: '{{ ORACLE_LISTENER_SID|default([]) }}'"
        tags:
          - debug
          - patching
      - name: "Step 31 --- Stop the named listeners from the {{ oracle_binary_version }} home"
 
        command: sudo -u oracle bash -c '. ~/.bash_profile;{{ oracle_home_path }}/bin/lsnrctl stop {{ listenername }}' 
        # when: "oracle_binary_version | splitVersion == '12'"
        tags:
          - patching
      - name: "Step 32 --- Shutdown the databases"
        command: sh '{{ oracle_script_prep }}/stopDatabase.sh'
        args:
          chdir: '{{ oracle_script_prep }}'
        tags:
          - patching
      - name: "Step 33 --- Print the value of the minimum desired OPatch version"
        debug:
          msg: "The value of the minimum required OPatch version is {{ minimum_required_opatch_version }}"
        tags:
          - debug
          - patching
          
      - name: "Step 34 --- Find the OPatch directory"
        command: cd '{{ oracle_home_path }}/OPatch'
        register: opatch_dir_check
        changed_when: no
        tags:
          - debug
          - patching
          
      # Step 13 --- Exported OPatch $PATH is handled in environment variable declaration
      - name: "Step 35 --- Make sure ORACLE_HOME is set to correct binaries"
        shell: 'echo {{ item }}'
        changed_when: no
        with_items:
          - $ORACLE_HOME
          - $PATH
        tags:
          - debug
          - patching

      
      - block:
          - name: "Step 36 --- Installing Quarterly Security Patch ({{ oneoff_patch_dir_int }})"
            ansible.builtin.expect:
              command: sudo -u oracle bash -c '. ~/.bash_profile;$ORACLE_HOME/OPatch/opatch apply' 
              chdir: '{{ oracle_home_path }}/patches/{{ oneoff_patch_dir }}/{{ oneoff_patch_dir_int }}/{{patchcode}}'
              responses:
                (?i)Email: ''
                (?i)uninformed: 'Y'
                (?i)proceed: 'y'
                (?i)patching: 'y'
              timeout: 1000
            register: opatchOutput
            #when: pexpect|succeeded
        rescue: 
          - name: "Rescue --- set a fact with the opatchlog location"
            set_fact:
              opatch_log_location: '{{ item | opatchLog | trim | replace("\r\n\r\n", "") }}'
            with_items:
              - '{{ opatchOutput.stdout }}'
          - name: "Rescue --- truncate fact to just the filename"
            set_fact:
              opatch_log_file: '{{ opatch_log_location | replace("/opt/ora/app/oracle/product/11.2.0.4/cfgtoollogs/opatch/","") }}'
            when: "oracle_binary_version | splitVersion == '11'" 
          - name: "Rescue --- truncate fact to just the filename"
            set_fact:
              opatch_log_file: '{{ opatch_log_location | replace("/opt/ora/app/oracle/product/12.1.0.2/cfgtoollogs/opatch/","") }}'
            when: "oracle_binary_version | splitVersion == '12'"
          
          - name: "Rescue --- Inform {{ email_distribution_group }} of a failed attempt at patching oracle binaries on {{ ansible_hostname }}"
            mail:
              subject: "Ansible Oracle Patching failed to patch {{ oracle_home_path }} on {{ ansible_fqdn }} (Job #{{ tower_job_id }})"
              host: '{{ email_server }}'
              body: "Executing 'opatch apply' failed. Please remediate issues logged at ({{ opatch_log_file }} ) and rerun the patching content."
              from: AUTOMATED_TOWER_NOTIFICATION@ansible.com
              to: '{{ email_distribution_group }}'
            become: false
            delegate_to: "{{ groups['tower_server'][0] }}" 
          - name: "Rescue -- Intentionally fail the play"
            fail:
              msg: 'The opatch apply command failed - the relevant opatch logs have been emailed to {{ email_distribution_group }} for further investigation.'
        tags:
          - patching      

      #Note: Apply One-off conflicting patches, if applicable . (FROM STEP 7)
      #Steps for patching the one-off usually are same as Binary Patching - depends on each patch
      - name: "Step 37 --- Verify all patches have been applied successfully"
        ansible.builtin.expect:
          command:  sudo -u oracle bash -c '. ~/.bash_profile;$ORACLE_HOME/OPatch/opatch lsinventory' 
          chdir: '{{ oracle_home_path }}/OPatch'
          responses:
            (?i)proceed: 'y'
        #when: pexpect|succeeded
        tags:
          - patching
      - name: "Step 38 --- Start the named listeners which were stopped from the {{ oracle_binary_version }} home"
        command: sudo -u oracle bash -c '. ~/.bash_profile;{{ oracle_home_path }}/bin/lsnrctl start {{ listenername }}' 
        #when: "oracle_binary_version | splitVersion == '12'"
        tags:
          - patching

      - name: "Step 39 --- Start the databases"
        command: sh '{{ oracle_script_prep }}/startDatabase.sh'
        args:
          chdir: '{{ oracle_script_prep }}'
        tags:
          - patching

    
          
    