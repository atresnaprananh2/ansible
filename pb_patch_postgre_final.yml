- hosts: all
  gather_facts: yes
  name: Patch postgresql
  vars:
    dest: /opt/opsware
    service_pattern: postgresql
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:
   
    - name: Display OS distribution and version
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }}"
    
    #linux script
    - name: Preparation - Get Software Policy Attr
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        print(ts.server.ServerService.getCustAttrs(server_ref, None, True) )
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: instattr
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"
    
    - name:  Preparation - setcustattr
      set_fact:
        custattr: "{{ instattr.stdout }}"
      when: "'RedHat' in ansible_distribution"

    - name:  Preparation - set variables 1
      set_fact:
        ansible_python_interpreter: "/opt/opsware/agent/bin/python3"
        postgrepatchname: "{{ custattr.postgresql_patchname }}"
        postgrepatchid: "{{ custattr.postgresql_patchid }}"
      
      when: "'RedHat' in ansible_distribution"

    - name:  Preparation - set variables 2
      set_fact:
        postgrefolder: "{{ postgrepatchname | regex_replace('\\.tar\\.gz$', '') }}"
      when: "'RedHat' in ansible_distribution"

    
    - name: Find the path of psql  (linux)
      command: which psql
      register: psql_path
      args:
        chdir: '/opt/opsware'
      when: "'RedHat' in ansible_distribution"


    - name: Resolve the real path of psql  (linux)
      command: readlink -f "{{ psql_path.stdout }}"
      register: binpathpsql
      args:
        chdir: '/opt/opsware'
      when: "'RedHat' in ansible_distribution"

    - name: Set fact base dir (linux)
      set_fact:
        basedirlnx: "{{ binpathpsql.stdout[:-4] }}"
      
      when: "'RedHat' in ansible_distribution"
    
    - name: Set fact base dir before bin (linux)
      set_fact:
        basedirpg: "{{ basedirlnx[:-5] }}"
      when: "'RedHat' in ansible_distribution"
     
  
    - name: Find the path of postgre data  (linux)
      command: sudo -u postgres psql -t -P format=unaligned -c "SHOW data_directory;"
      register: pgdatadir
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"

    - name: Get Installed Version  (linux)
      command: sudo -u postgres psql -t -P format=unaligned -c "SELECT version();"
      register: pgdataver
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"
      
    - name: Get Major Version
      command: sudo -u postgres  psql -t -P format=unaligned -c "SHOW server_version;"
      register: majorver
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"  
    
    - name: Set fact data dir (linux)
      set_fact:
        datadirlnx: "{{ pgdatadir.stdout }}"
        datadirshrt: "{{ pgdatadir.stdout[:-7] }}"
        postgres_version: "{{ pgdataver.stdout.split()[1] }}"
        major_ver: "{{ majorver.stdout.split('.')[0] }}"
      when: "'RedHat' in ansible_distribution"
    
    - name: Version Check  (linux)
      debug:
        var: postgres_version
      when: "'RedHat' in ansible_distribution"

    - name: Major Version Check  (linux)
      debug:
        var: major_ver
      when: "'RedHat' in ansible_distribution"

    
    - name: Run pg_dumpall  (linux)
      shell: sudo -u postgres pg_dumpall > {{ datadirshrt }}/backup_{{ now(utc=true,fmt='%d%m%Y') }}.sql
      register: chk1
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"

    - name: Stop old svc   (linux)
      shell: sudo -u postgres {{basedirlnx}}/pg_ctl stop -D {{ datadirlnx }}
      register: chk3
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"



    - name: Prerequisite --- download patch file
      command: "{{ ansible_python_interpreter }}"
      args:
        stdin: >
          from coglib import downloader;

          downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{ postgrepatchid }},None,None,'{{ postgrepatchname }}', None, '/opt/opsware'))
      register: test
      when: "'RedHat' in ansible_distribution"   
      tags: download,remote

    - name: Extract patch data
      command: tar -xzf /tmp/{{ postgrepatchname }} -C /opt/opsware/
      when: "'RedHat' in ansible_distribution"
    
    - name: configure installer
      shell: ./configure --prefix={{ basedirpg }} --without-icu
      register: chk2
      args:
        chdir: '/opt/opsware/{{ postgrefolder }}'
      when: "'RedHat' in ansible_distribution"

    - name: make file 
      command: make
      args:
        chdir: '/opt/opsware/{{ postgrefolder }}'
      when: "'RedHat' in ansible_distribution"
     

    - name: make install 
      command: make install
      register: chkins
      args:
        chdir: '/opt/opsware/{{ postgrefolder }}'
      when: "'RedHat' in ansible_distribution"
    
    - name: chk configure
      debug:
        msg:
          - "{{ chkins.stdout }}"
      when: "'RedHat' in ansible_distribution"
    
    - name: Start old svc   (linux)
      shell: sudo -u postgres {{ basedirlnx }}/pg_ctl start -D {{ datadirlnx }}
      register: chk3
      args:
        chdir: "{{ basedirlnx }}"
      when: "'RedHat' in ansible_distribution"
    

    - name: set command links  (linux)
      shell: sudo ln -s /usr/pgsql-{{ major_ver }}/bin/* /usr/bin/ --force
      args:
        chdir: '{{ basedirlnx }}'
      when: "'RedHat' in ansible_distribution"
    
    #Windows Host Script
    - name: Create a temporary Python script file get custom attr
      win_shell: |
        $script = @"
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts.interfaces[0]["ipv4"]["address"] }}" :
                    try:
                        print(ts.server.ServerService.getCustAttrs(server_ref, None, True) )
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        "@
        $script | Out-File -FilePath C:\getcustomattr.py -Encoding UTF8
      when: "'Windows' in ansible_distribution"

    - name: Execute the Python script
      win_shell: |
        cd "C:\Program Files\Opsware\agent\python3"
        .\python C:\getcustomattr.py
      register: instattrwin
      when: "'Windows' in ansible_distribution"


    - name: Remove the temporary Python script
      win_file:
        path: C:\getcustomattr.py
        state: absent
      when: "'Windows' in ansible_distribution"

    - name:  Preparation - setcustattr
      set_fact:
        custattrwin: "{{ instattrwin.stdout }}"
      when: "'Windows' in ansible_distribution"
    
    - name:  Preparation - set variables
      set_fact:
        postgrepatchnamewin: "{{ custattrwin.postgresql_patchname }}"
        postgrepatchidwin: "{{ custattrwin.postgresql_patchid }}"
        userdir: "C:/Program Files/Opsware/"
      when: "'Windows' in ansible_distribution"
    
    
    - name: Download patch file
      win_shell: |
        $script = @"
        from coglib import downloader;

        downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{ postgrepatchidwin }},None,None,'{{ postgrepatchnamewin }}', None, r'{{ userdir }}'))
        "@
        $script | Out-File -FilePath C:\downloadfile.py -Encoding UTF8
      when: "'Windows' in ansible_distribution"

    

    - name: Execute the download file using Python script
      win_shell: |
        cd "C:\Program Files\Opsware\agent\python3"
        .\python C:\downloadfile.py
      register: instattrwin
      when: "'Windows' in ansible_distribution"


    - name: Remove the temporary download file using Python script
      win_file:
        path: C:\downloadfile.py
        state: absent
      when: "'Windows' in ansible_distribution"

    - name: Get PostgreSQL installation base directory from registry (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Installations
      register: postgres_installations
      when: "'Windows' in ansible_distribution"

    - name: Get Global PostgreSQL (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL Global Development Group\PostgreSQL
      register: postgresglobal
      when: "'Windows' in ansible_distribution" 
    
    - name: Check Postgre Installed Ver (windows)
      debug:
        msg: "PostgreSQL {{ postgresglobal.properties['Version']['value'] }}"   
      when: "'Windows' in ansible_distribution"

    - name: Get the first installation ID (windows)
      set_fact:
        installation_id: "{{ postgres_installations.sub_keys[0] }}"
      when: "'Windows' in ansible_distribution"

    - name: Retrieve installation directory (windows)
      win_reg_stat:
        path: HKLM:\SOFTWARE\PostgreSQL\Installations\{{ installation_id }}
      register: postgres_installation_dir2
      when: "'Windows' in ansible_distribution"
    
   
    - name: Set fact base dir (windows)
      set_fact:
        basedir: "{{ postgres_installation_dir2.properties['Base Directory']['value'] }}"
        datadir: "{{ postgres_installation_dir2.properties['Data Directory']['value'] }}"
        installedver: "{{ postgresglobal.properties['Version']['value'] }}"
        serviceid: "{{ postgres_installation_dir2.properties['Service ID']['value'] }}"

      when: "'Windows' in ansible_distribution"

    - name: Stop PostgreSQL service (windows)
      win_service:
        name: "{{ serviceid }}"
        state: stopped
      when: "'Windows' in ansible_distribution"

    - name: Backup PostgreSQL data directory (windows)
      win_command: >
        powershell -command "Copy-Item -Path '{{ datadir }}' -Destination 'C:\Program Files\Opsware\PostgreSQL_Backup' -Recurse"
      when: "'Windows' in ansible_distribution"

    

    - name: Install PostgreSQL (windows)
      win_command: >
        powershell -command "Start-Process -FilePath '{{ userdir }}{{ postgrepatchnamewin }}' -ArgumentList '--unattendedmodeui minimal --mode unattended --prefix "{{ basedir }}" --datadir "{{ datadir }}"' -Wait"
      register: install_output
      when: "'Windows' in ansible_distribution"

    - name: Print install output (windows)
      debug:
        var: install_output
      when: "'Windows' in ansible_distribution"

    - name: Start PostgreSQL service (windows)
      win_service:
        name: "{{ serviceid }}"
        state: started
      when: "'Windows' in ansible_distribution"
    
    - name: Remove the specified file
      win_file:
        path: "{{ userdir }}{{ postgrepatchnamewin }}"
        state: absent
      when: "'Windows' in ansible_distribution"



    




    