- hosts: all
  gather_facts: yes
  name: System Discovery
  vars: 
    - patch_description: 'No Interim Patch installed'
    - isclustered: 'no'
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:
  

    - name: Display OS distribution and version (linux)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts['default_ipv4']['address'] }}"
      when: "'Windows' not in ansible_distribution"
    
    - name: Display OS distribution and version (windows)
      debug:
        msg: "The OS distribution of {{ ansible_facts.hostname }} is {{ ansible_distribution }} ver {{ ansible_distribution_version }} and IP: {{ ansible_facts.ip_addresses[1] }}"
      when: "'Windows' in ansible_distribution"

    #linux script
    
    
    - name: Get Oracle PMON processes
      shell: ps -ef | grep ora_pmon | grep -v grep
      register: pmon_output
      when: "'RedHat' in ansible_distribution"
    
    - name: Get Oracle User
      shell: ps -ef | grep ora_pmon | grep -v grep | awk '{print $1}' | uniq
      register: oracle_user
      when: "'RedHat' in ansible_distribution"

    - name:  Preparation - set variables
      set_fact:
        isclustered: 'yes'
      when: 
        - "'RedHat' in ansible_distribution"
        - "'+ASM' in pmon_output.stdout"

    

    - name: Find the path oracle home  (linux)
      command: grep -E '^[^#]' /etc/oratab
      register: oraclehomeinfo
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"

    - name: Find the latest patch installed
      command:  sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile;$ORACLE_HOME/OPatch/opatch lsinventory' 
      register: oraclelastpatch
      args:
        chdir: '/var/lib'
      when: "'RedHat' in ansible_distribution"

    - name: check patch
      debug:
        var: oraclelastpatch
      when: "'RedHat' in ansible_distribution"

    - name: Extract patch description
      set_fact:
        patchdesc: "{{ oraclelastpatch.stdout | regex_search('Patch description:  \"(.*?)\"', '\\1') }}"
   

    - name: check patch
      set_fact:
        patch_description: "{{ patchdesc[0] }}" 
      when:  patchdesc != ''


    - name: Display the extracted patch description
      debug:
        msg: "Extracted Patch Description: {{ patch_description }}"
        

    - name: check latest version  (linux)
      debug:
        var: oraclehomeinfo.stdout.split(':')[1]
      when: "'RedHat' in ansible_distribution"

    
    - name: check autorun  (linux)
      debug:
        var: oraclehomeinfo.stdout.split(':')
      when: "'RedHat' in ansible_distribution"

    
    - name: Set fact oratab (linux)
      set_fact:
        oraclehome: "{{ oraclehomeinfo.stdout.split(':')[1] }}"
        instance: "{{ oraclehomeinfo.stdout.split(':')[0] }}"
        autorun: "{{ oraclehomeinfo.stdout.split(':')[2] }}"
        byteleft: "{{ ansible_mounts | selectattr('mount', '==', '/') | map(attribute='size_available') | first }}"
        osver: "{{ ansible_distribution }} ver {{ ansible_distribution_version }}" 
        patchloc: "/opt/opsware/Patching/"
      when: "'RedHat' in ansible_distribution"

    - name: Get Oracle Home directory size in GB
      ansible.builtin.shell: |
        du -sBG {{ oraclehome }} | cut -f1 | tr -d 'G'
      register: oracle_home_size

    - name: Display Oracle Home directory size in GB
      debug:
        msg: "Oracle Home Size: {{ oracle_home_size.stdout }} GB"

    - name: Check root filesystem space
      debug:
        msg: "Root filesystem space: {{ byteleft | float * (1/1000000000)  }} GB available"

    - name: "Get Oracle Version"
      command: sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile;sqlplus -v'
      register: oracleversion
      when: "'RedHat' in ansible_distribution"
    
    - name: check oracle version  (linux)
      debug:
        var:   " oracleversion.stdout_lines[1] | regex_replace('SQL\\*Plus: ', '') "
       
      when: "'RedHat' in ansible_distribution"

    - name: "Get Port"
      command: sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile;{{ oraclehome }}/bin/lsnrctl status' 
        # when: "oracle_binary_version | splitVersion == '12'"
      register: oracleport
      when: "'RedHat' in ansible_distribution"


    - name: "Get Opatch Version"
      command: sudo -u {{ oracle_user.stdout }} bash -c '. ~/.bash_profile;{{ oraclehome }}/OPatch/opatch version'
      register: opatchversion
      when: "'RedHat' in ansible_distribution"

    - name: check opatch version  (linux)
      debug:
        var: "opatchversion.stdout_lines[0] | regex_replace('OPatch Version: ', '')"
      when: "'RedHat' in ansible_distribution"

  
    - name: Set fact version (linux)
      set_fact:
        oracleversion: "{{ oracleversion.stdout_lines[1] | regex_replace('SQL\\*Plus: ', '') }}"
        opatchversion: "{{ opatchversion.stdout_lines[0] | regex_replace('OPatch Version: ', '') }}"
        oraport: "{{ oracleport.stdout | regex_findall('PORT=([0-9]+)', '\\1') }}"
        orahomesize: "{{ oracle_home_size.stdout }}"
        rootsize: "{{ byteleft | float * (1/1000000000)  }}"
      when: "'RedHat' in ansible_distribution"

    - name: Extract major Oracle version (12.2.0)
      set_fact:
        oracle_major_version: "{{ oracleversion | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)') }}"

    - name: Display major Oracle version
      debug:
        msg: "The Oracle major version is: {{ oracle_major_version }}"
    
    - name: check port   (linux)
      debug:
        var: oraport[0]
      when: "'RedHat' in ansible_distribution"
      
    - name: Check ownership of known Oracle directories
      ansible.builtin.stat:
        path: "{{ item }}"
      register: oracle_dir_info
      with_items:
        - "/u01/app/oracle"
        - "/opt/oracle"
        - "/home/oracle"
      ignore_errors: yes

    - name: Identify the user owning Oracle directories
      set_fact:
        oracle_os_user: "{{ oracle_dir_info.results | selectattr('stat.exists', 'equalto', true) | map(attribute='stat.pw_name') | first }}"
      when: oracle_dir_info.results | selectattr('stat.exists', 'equalto', true) | list | length > 0

    - name: Check for running Oracle processes
      ansible.builtin.shell: "ps -eo user,comm | grep pmon | awk '{print $1}' | uniq"
      register: oracle_process_user
      ignore_errors: yes

    - name: Set fact for Oracle process user if Oracle directories not found
      set_fact:
        oracle_os_user: "{{ oracle_process_user.stdout_lines[0] }}"
      when: oracle_os_user is not defined and oracle_process_user.stdout_lines | length > 0

    - name: Search for Oracle environment variables in all users
      ansible.builtin.shell: "cat /etc/passwd | cut -d: -f1 | xargs -n 1 -I {} bash -c 'echo User: {} && sudo -u {} env | grep ORACLE_HOME' | grep User"
      register: oracle_env_user
      ignore_errors: yes

    - name: Set fact for Oracle environment user if not already found
      set_fact:
        oracle_os_user: "{{ oracle_env_user.stdout | regex_findall('User: (.+)') | first }}"
      when: oracle_os_user is not defined and oracle_env_user.stdout | length > 0

    - name: Display Oracle OS user
      debug:
        msg: "Oracle OS User: {{ oracle_os_user if oracle_os_user is defined else 'Oracle user not found' }}"

    - name: Run ps command and grep for tnslsnr
      shell: ps -ef | grep tnslsnr | grep -v grep
      register: ps_output

    - name: Extract tnslsnr path
      shell: echo "{{ ps_output.stdout }}" | awk '{print $8}' | head -n 1
      register: tnslsnr_path

    - name: Display tnslsnr executable path without newline
      debug:
        msg: |
          {% if tnslsnr_path.stdout != "" %}
            The Oracle listener executable (tnslsnr) path is: {{ tnslsnr_path.stdout }}
          {% else %}
            tnslsnr executable not found.
          {% endif %}

    - name: Extract listener name from process details
      set_fact:
        listener_name: "{{ ps_output.stdout | regex_search('tnslsnr\\s+(\\S+)') | replace('tnslsnr ', '') | trim }}"

    - name: Display listener name
      debug:
        msg: "The Oracle listener name is: {{ listener_name }}"

    - name: Push custom attributes to selected server
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        server_details = ts.server.ServerService.getServerVO(server_ref)
                        CAMap = {'oracle_rootspace': '{{ rootsize }}','oracle_homespace': '{{ orahomesize }}', 'oracle_cluster': '{{ isclustered }}', 'oracle_osversion': '{{ osver }}', 'oracle_dbversion':'{{ oracleversion }}', 'oracle_user': '{{ oracle_os_user if oracle_os_user is defined else 'Oracle user not found' }}', 'oracle_instance': '{{ instance }}','oracle_listener' : '{{ tnslsnr_path.stdout }}', 'oracle_home':'{{ oraclehome }}','oracle_backup_loc': 'NA', 'oracle_patch_location': '{{ patchloc }}','oracle_opatch_version':'{{ opatchversion }}', 'oracle_port': '{{ oraport[0] }}', 'oracle_autorun': '{{ autorun }}', 'oracle_patch_info': '{{ patch_description }}'}
                        ts.server.ServerService.setCustAttrs(server_ref, CAMap)
                        print("ok")
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: python_output
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"

    - name: Display Python script output
      debug:
        msg: "{{ python_output.stdout }}" 
      when: "'RedHat' in ansible_distribution"
   


   



    

    