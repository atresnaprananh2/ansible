- name: Patch Microsoft SQL Server 
  hosts: all  # Replace with your actual Windows host group
  gather_facts: yes
  vars:
    dest: C:\Temp
  tasks:
   
    - name: Check if directory exists, if not create it
      ansible.windows.win_file:
        path: "{{ dest }}"
        state: directory

    - name: Create a temporary Python script file get custom attr
      win_shell: |
        $script = @"
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts.interfaces[0]["ipv4"]["address"] }}" :
                    try:
                        print(ts.server.ServerService.getCustAttrs(server_ref, None, True) )
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        "@
        $script | Out-File -FilePath C:\getcustomattr.py -Encoding UTF8
      when: "'Windows' in ansible_distribution"

    - name: Execute the Python script
      win_shell: |
        cd "C:\Program Files\Opsware\agent\python3"
        .\python C:\getcustomattr.py
      register: instattrwin
      when: "'Windows' in ansible_distribution"


    - name: Remove the temporary Python script
      win_file:
        path: C:\getcustomattr.py
        state: absent
      when: "'Windows' in ansible_distribution"

    - name:  Preparation - setcustattr
      set_fact:
        custattrwin: "{{ instattrwin.stdout }}"
      when: "'Windows' in ansible_distribution"
    
    - name:  Preparation - set variables
      set_fact:
        patchname: "{{ custattrwin.mssql_patchname }}"
        patchid: "{{ custattrwin.mssql_patchid }}"
      when: "'Windows' in ansible_distribution"
    
    - name: Download patch file
      win_shell: |
        $script = @"
        from coglib import downloader;

        downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{ patchid }},None,None,'{{ patchname }}', None, r'{{ dest }}'))
        "@
        $script | Out-File -FilePath C:\downloadfile.py -Encoding UTF8
      when: "'Windows' in ansible_distribution"

    - name: Execute the download file using Python script
      win_shell: |
        cd "C:\Program Files\Opsware\agent\python3"
        .\python C:\downloadfile.py
      register: instattrwin
      when: "'Windows' in ansible_distribution"


    - name: Remove the temporary download file using Python script
      win_file:
        path: C:\downloadfile.py
        state: absent
      when: "'Windows' in ansible_distribution"

    - name: Retrieve SQL Server instance names from the registry
      win_shell: |
        Get-Item -Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL" |
        Select-Object -ExpandProperty Property
      register: sql_instances
      when: 
        - "'Windows' in ansible_distribution"

    - name: Display the SQL Server instance names
      debug:
        msg: "SQL Server Instance Names: {{ sql_instances.stdout_lines }}"
      when: 
        - "'Windows' in ansible_distribution"
        

    - name: set instance
      set_fact:
        instancelist: "{{ sql_instances.stdout_lines }}"
      when: 
        - "'Windows' in ansible_distribution"
    
    - name: Run the SQL Server patch installer silently
      win_shell: >
        {{ dest }}\\{{ patchname }} /quiet /action=patch /IAcceptSQLServerLicenseTerms /allinstances /skiprules=RestartRequiredCheck
      args:
        executable: cmd
      ignore_errors: yes
      register: install_status

    - name: Delete directory and its contents
      ansible.windows.win_file:
        path: "{{ dest }}"
        state: absent

    - name: Check if reboot is required
      debug:
        msg: >
          Installation completed with return code {{ install_status.rc }}.
          A reboot is {{ 'required' if install_status.rc == 3010 else 'not required' }}.

    - name: Reboot if required
      win_reboot:
      when: install_status.rc == 3010

   