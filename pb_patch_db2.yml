- name: Patch db2
  hosts: db2svr 
  gather_facts: yes
  name: System Discovery
  remote_user: root
  become: true
  become_user: root
  vars:   
    #change the patch information if needed
    - mysql_installation_2: {}
    - mysql_installation: {}
  tasks:
    - name: Preparation - Get Software Policy Attr
      shell: |
        ./python3 - << 'EOF'
        import pytwist
        from pytwist import * 
        from pytwist.com.opsware.search import Filter
        from pytwist import twistserver
        from pytwist.com.opsware.server import ServerRef
        import json
        ts = pytwist.twistserver.TwistServer()
        try:
            server_service = ts.server.ServerService
            filter = Filter()
            server_refs = server_service.findServerRefs(filter)
            for server_ref in server_refs:
                server_details = ts.server.ServerService.getServerVO(server_ref)
                if server_details.primaryIP == "{{ ansible_facts['default_ipv4']['address'] }}" :
                    try:
                        print(ts.server.ServerService.getCustAttrs(server_ref, None, True) )
                    except Exception as e:
                        print(f"Error processing server {server_ref.getId()}: {e}")
          
        except Exception as e:
            print(f"Failed to authenticate: {str(e)}")
            exit(1)  
        EOF
      register: instattr
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"
    
    - name:  Preparation - setcustattr
      set_fact:
        custattr: "{{ instattr.stdout }}"
      when: "'RedHat' in ansible_distribution"
    

    - name:  Preparation - set variables 1
      set_fact:
        ansible_python_interpreter: "/opt/opsware/agent/bin/python3"
        db2patchname: "{{ custattr.DB2_Patch_Name }}"
        db2patchid: "{{ custattr.DB2_Patch_Id }}"
        db2home: "{{ custattr.DB2_Home }}"
        db2installationpath: "{{ custattr.DB2_InstallationPath }}"
        db2user: "{{ custattr.DB2_User }}"
        db2installfixpackpath: "{{ custattr.DB2_InstallationPath[:-8] }}"

      when: "'RedHat' in ansible_distribution"
    
    - name: check status
      debug:
        var: db2installfixpackpath
      when: "'RedHat' in ansible_distribution"   
    
    
    - name:  Preparation - set variables 2
      set_fact:
        db2_destdownload: "/tmp"
      when: "'RedHat' in ansible_distribution"


    - name: stop db2 service
      command: su - db2inst1 -c "db2stop"
      register: db2stopchk
      when: 
        - "'RedHat' in ansible_distribution"   
    
    - name: check status db2stop
      debug:
        var: db2stopchk.stdout
      when: "'RedHat' in ansible_distribution"   

    - name: Prerequisite --- download patch file
      command: "{{ ansible_python_interpreter }}"
      args:
        stdin: >
          from coglib import downloader;

          downloader.Tsunami().fetch_unit(downloader.DownloadUnit({{ db2patchid }},None,None,'{{ db2patchname }}', None, '{{ db2_destdownload }}'))
      register: test
      when: "'RedHat' in ansible_distribution"   
      tags: download,remote

   

    - name: Extract DB2
      command: tar -xvf {{ db2_destdownload }}/{{ db2patchname }} -C /tmp
      when: 
        - "'RedHat' in ansible_distribution"   
 
    - name: install fixpack test      
      shell: ./installFixPack -b {{ db2installfixpackpath }} -p /var/test_db2_patch -y
      args:
        chdir: '/tmp/server_dec'
      register: logcheck
      when: "'RedHat' in ansible_distribution"   
  

    # - name: install fixpack 
    #   shell: >
    #     ./installFixPack -b {{ db2installfixpackpath }} -y <<EOF
    #     no
    #     EOF
    #   args:
    #     chdir: '/tmp/server_dec'
    #   register: logcheck
    #   ignore_errors: yes
    #   when: "'RedHat' in ansible_distribution"   

    - name: check status installation 
      debug:
        var: logcheck.stdout
      when: "'RedHat' in ansible_distribution"   
    
    - name: db2 level check
      command: su - db2inst1 -c "db2level"
      register: dblevelchk
      when: 
        - "'RedHat' in ansible_distribution"   
    
    - name: check status dblevel
      debug:
        var: dblevelchk.stdout
      when: "'RedHat' in ansible_distribution"   
    
    - name: start db2 service
      command: su - db2inst1 -c "db2start"
      register: db2startchk
      when: 
        - "'RedHat' in ansible_distribution"   

    - name: check status dblevel
      debug:
        var: dblevelchk.stdout
      when: "'RedHat' in ansible_distribution"   
    
    - name: Remove the file patch
      ansible.builtin.file:
        path: "{{ db2_destdownload }}/{{ db2patchname }}"
        state: absent

    - name: Remove the directory server_dec
      ansible.builtin.file:
        path: "{{ db2_destdownload }}/server_dec"
        state: absent


   