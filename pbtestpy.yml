- hosts: all
  gather_facts: no
  name: System Discovery
  tasks:
   
      
    - name: testscr
      shell: |
        ./python3 - << 'EOF'
        import os
        def search_oracle_home():
            common_paths = [
                '/u01/app/oracle/product',
                '/opt/oracle/product',
                '/usr/lib/oracle',
                '/usr/local/oracle'
            ]
            for path in common_paths:
                if os.path.isdir(path):
                   print(f"Possible ORACLE_HOME directory found: {path}")
                   return path
                print("ORACLE_HOME directory not found in common locations.")
            return None
        if __name__ == "__main__":
            search_oracle_home()

        EOF
      register: python_output
      args:
        chdir: '/opt/opsware/agent/bin'
      when: "'RedHat' in ansible_distribution"

    - name: Display Python script output
      debug:
        msg: "{{ python_output.stdout }}" 
      when: "'RedHat' in ansible_distribution"
   


   



    

    # #Windows Host Script

    # - name: Get PostgreSQL installation base directory from registry (windows)
    #   win_reg_stat:
    #     path: HKLM:\SOFTWARE\PostgreSQL\Installations
    #   register: postgres_installations
    #   when: "'Windows' in ansible_distribution"

    # - name: Get Global PostgreSQL (windows)
    #   win_reg_stat:
    #     path: HKLM:\SOFTWARE\PostgreSQL Global Development Group\PostgreSQL
    #   register: postgresglobal
    #   when: "'Windows' in ansible_distribution"
    
    # - name: Check Postgre Installed Ver (windows)
    #   debug:
    #     msg: "PostgreSQL {{ postgresglobal.properties['Version']['value'] }}"   
    #   when: "'Windows' in ansible_distribution"

    # - name: Get the first installation ID (windows)
    #   set_fact:
    #     installation_id: "{{ postgres_installations.sub_keys[0] }}"
    #   when: "'Windows' in ansible_distribution"

    # - name: Retrieve installation directory (windows)
    #   win_reg_stat:
    #     path: HKLM:\SOFTWARE\PostgreSQL\Installations\{{ installation_id }}
    #   register: postgres_installation_dir2
    #   when: "'Windows' in ansible_distribution"

    
    
   
    # - name: Set fact base dir (windows)
    #   set_fact:
    #     basedir: "{{ postgres_installation_dir2.properties['Base Directory']['value'] }}"
    #     datadir: "{{ postgres_installation_dir2.properties['Data Directory']['value'] }}"
    #     installedver: "{{ postgresglobal.properties['Version']['value'] }}"
    #     CompleteVer: "{{ postgres_installation_dir2.properties['CLT_Version']['value'] }}"
    #     serviceid: "{{ postgres_installation_dir2.properties['Service ID']['value'] }}"
    #     superuser: "{{ postgres_installation_dir2.properties['Super User']['value'] }}"

    #   when: "'Windows' in ansible_distribution"

    # - name: Execute SQL command to get PostgreSQL port
    #   win_shell: |
    #     $env:PGPASSWORD = "P@ssw0rdnh2"
    #     {{ basedir }}\bin\psql.exe -U postgres -d postgres -c "SHOW port;" -t
    #   become: yes
    #   become_method: runas
    #   become_user: postgres
    #   register: postgres_port
    #   when: "'Windows' in ansible_distribution"

    # - name: Display the PostgreSQL port
    #   debug:
    #     msg: "PostgreSQL is running on port: {{ postgres_port.stdout.strip() }}"
    #   when: "'Windows' in ansible_distribution"

    # - name: Execute SQL command to get PostgreSQL port
    #   win_shell: |
    #     $env:PGPASSWORD = "P@ssw0rdnh2"
    #     {{ basedir }}\bin\psql.exe -U postgres -d postgres -c "select pg_is_in_recovery();" -t
    #   become: yes
    #   become_method: runas
    #   become_user: postgres
    #   register: postgremode
    #   when: "'Windows' in ansible_distribution"
    
    # - name: Set mode (windows)
    #   set_fact:
    #     psqlmode: 'standalone'
    #   when: 
    #     - "'Windows' in ansible_distribution"
    #     - "postgremode.stdout != 't'" 

    # - name: Set fact port  (windows)
    #   set_fact:
    #     portpsql: "{{ postgres_port.stdout.strip() }}"
    #   when: "'Windows' in ansible_distribution"
       
    

   
    # - name: Check Version
    #   win_shell: |
    #       # Ensure PowerShell uses TLS 1.2
    #       [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

    #       # Alternatively, use TLS 1.3 if supported
    #       # [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls13

    #       # Now run your Invoke-WebRequest command
    #       $response = Invoke-WebRequest -Uri "https://www.postgresql.org/ftp/source/" -UseBasicParsing

    #       # Extract version numbers that match "v15.x.x"
    #       $versions = $response.Content -split "`n" | ForEach-Object {
    #           if ($_ -match 'v{{ installedver }}\.[0-9]+') {
    #               $matches = [regex]::Match($_, 'v{{ installedver }}\.[0-9]+')
    #               if ($matches.Success) {
    #                   $matches.Value
    #               }
    #           }
    #       }

    #       # Sort the versions and select the latest one
    #       $latest_version = $versions | Sort-Object | Select-Object -Last 1

    #       # Display the latest version
    #       $latest_version
    #   register: latestver
    #   when: "'Windows' in ansible_distribution"
    
    # - name: check latest version  (windows)
    #   debug:
    #     var: latestver.stdout[1:-2]
    #   when: "'Windows' in ansible_distribution"

    # - name: Set updateflag
    #   set_fact:
    #     needupdates: y
    #   when: 
    #     - "'Windows' in ansible_distribution"
    #     - "installedver != latestver.stdout[1:-2]"

    # - name: Create a temporary Python script file
    #   win_shell: |
    #     $script = @"
    #     import pytwist
    #     from pytwist import * 
    #     from pytwist.com.opsware.search import Filter
    #     from pytwist import twistserver
    #     from pytwist.com.opsware.server import ServerRef
    #     import json
    #     ts = pytwist.twistserver.TwistServer()
    #     try:
    #         ts.authenticate("aditya", "Nh2server!")
    #         server_service = ts.server.ServerService
    #         filter = Filter()
    #         server_refs = server_service.findServerRefs(filter)
    #         for server_ref in server_refs:
    #             server_details = ts.server.ServerService.getServerVO(server_ref)
    #             if server_details.primaryIP == "{{ ansible_facts.ip_addresses[1] }}" :
    #                 try:
    #                     server_details = ts.server.ServerService.getServerVO(server_ref)
    #                     CAMap = {'Version':'{{ CompleteVer }}', 'datadir': '{{ datadir }}','databaseplatform': 'PostgreSQL', 'Home':'{{ basedir }}','os_user': '{{ superuser }}', 'port': '{{ portpsql }}', 'mode': '{{ psqlmode }}'}
    #                     ts.server.ServerService.setCustAttrs(server_ref, CAMap)
    #                     print("ok")
    #                 except Exception as e:
    #                     print(f"Error processing server {server_ref.getId()}: {e}")
          
    #     except Exception as e:
    #         print(f"Failed to authenticate: {str(e)}")
    #         exit(1)
    #     "@
    #     $script | Out-File -FilePath C:\pushcustomattr.py -Encoding UTF8
    #   when: "'Windows' in ansible_distribution"

    # - name: Execute the Python script
    #   win_shell: |
    #     cd "C:\Program Files\Opsware\agent\python3"
    #     .\python C:\pushcustomattr.py
    #   register: result
    #   when: "'Windows' in ansible_distribution"

    # - name: Display the output
    #   debug:
    #     var: result.stdout
    #   when: "'Windows' in ansible_distribution"

    # - name: Remove the temporary Python script
    #   win_file:
    #     path: C:\pushcustomattr.py
    #     state: absent
    #   when: "'Windows' in ansible_distribution"
  

    




    